<serverConfiguration version="4.4.2">
  <date>2023-11-29 18:18:32</date>
  <channelGroups>
    <channelGroup version="4.4.2">
      <id>7a4e6d78-a130-4aa7-9d85-6aa8921c6e65</id>
      <name>CareQuality Document Exchange</name>
      <revision>1</revision>
      <lastModified>
        <time>1701286167901</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>CareQuality Query-Based Document Exchange
</description>
      <channels>
        <channel version="4.4.2">
          <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>6cdb6776-3488-47c6-8c90-2015ea051f93</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>c240418b-26ef-4836-a857-01c74fb07963</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>79208c1b-3cbb-4d6e-aeb3-a8387cee4f93</id>
          <revision>0</revision>
        </channel>
      </channels>
    </channelGroup>
  </channelGroups>
  <channels>
    <channel version="4.4.2">
      <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DQ Bulk Interface</name>
      <description>XCA ITI-38 Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-38 Interface channel&#xd;
 - takes individual requests and sends to the XCA ITI-38 Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {	

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) { 
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {		
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0, 
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {	
	
		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {
			
			if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			}
			
		} catch(ex) {errorCount++}
	
		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {
			
			var result = router.routeMessageByChannelId($g(&apos;XCAITI38Interface&apos;), JSON.stringify(entry, null, 2));
// TODO: Verify response and increase processedCount
			
		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992134710</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DR Bulk Interface</name>
      <description>XCA ITI-39 Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-39 Interface channel&#xd;
 - takes individual requests and sends to the XCA ITI-39 Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {	

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) { 
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {		
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0, 
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {	
	
		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {
			
			if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			}
			
		} catch(ex) {errorCount++}
	
		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {
			
			var result = router.routeMessageByChannelId($g(&apos;XCAITI39Interface&apos;), JSON.stringify(entry, null, 2));
// TODO: Verify response and increase processedCount
			
		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992188709</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-38 Interface</name>
      <description>XCA ITI-38 Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCA ITI-38 [Cross Gateway Query] Processor channel&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}



// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {	

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {
		
		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);		
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());
		
	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>3f38affa-7132-4c4d-8597-2679b2651a13</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD Bulk Interface
globalMap.put(&apos;XCAITI38Interface&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992511644</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
      <nextMetaDataId>7</nextMetaDataId>
      <name>XCA ITI-38 Processor</name>
      <description>XCA ITI-38 Processor channel&#xd;
 - Generates ITI-38 &quot;Cross Gateway Query&quot; SOAP message&#xd;
 - Calls XCA endpoint&#xd;
 - Processes responses&#xd;
&#xd;
Last updated: Nov 27 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

// Store for further processing
channelMap.put(&apos;REQUEST&apos;, msg);

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var parameterList = new XMLList();

/*
For document searches on the NHIN, it is recommended to use the following elements as the primary search parameters:
 * Patient ID
 * Class code
 * Practice Setting Code
 * Healthcare Facility Type
 * Document Creation Time 
*/

// XDSDocumentEntryPatientId (REQUIRED) [1..1]
var patientEntry = getXDSDocumentEntryPatientId(msg.patientIdentifier.id.toString(), msg.patientIdentifier.orgOid.toString());
if (patientEntry) parameterList += patientEntry;

// XDSDocumentEntryStatus (REQUIRED) [1..*]
var docStatus = getXDSDocumentEntryStatus();
if (docStatus) parameterList += docStatus;

// XDSDocumentEntryClassCode (OPTIONAL) [0..*]
if (msg.hasOwnProperty(&apos;classCode&apos;) &amp;&amp; msg.classCode.length &gt; 0) {
	var docClassCode = getXDSDocumentEntryClassCode(msg.classCode);
	if (docClassCode) parameterList += docClassCode;
}

// XDSDocumentEntryPracticeSettingCode (OPTIONAL - RECOMMENDED) [0..*]
if (msg.hasOwnProperty(&apos;practiceSettingCode&apos;) &amp;&amp; msg.practiceSettingCode.length &gt; 0) {
	var practiceSetting = getXDSDocumentEntryPracticeSettingCode(msg.practiceSettingCode);
	if (practiceSetting) parameterList += practiceSetting;
}

// XDSDocumentEntryHealthcareFacilityTypeCode (OPTIONAL - RECOMMENDED) [0..*]
if (msg.hasOwnProperty(&apos;facilityTypeCode&apos;) &amp;&amp; msg.facilityTypeCode.length &gt; 0) {
	var facilityCode = getXDSDocumentEntryHealthcareFacilityTypeCode(msg.facilityTypeCode);
	if (facilityCode) parameterList += facilityCode; 
}

// XDSDocumentEntryCreationTimeFrom (OPTIONAL - RECOMMENDED) [0..1]
// XDSDocumentEntryCreationTimeTo (OPTIONAL - RECOMMENDED) [0..1]
if (msg.hasOwnProperty(&apos;documentCreationDate&apos;)) {
	
	if (msg.documentCreationDate.hasOwnProperty(&apos;dateFrom&apos;)) {
		var dateFrom = getXDSDocumentEntryCreationTimeFrom(msg.documentCreationDate.dateFrom.toString());
		if (dateFrom) parameterList += dateFrom;
	}
	
	if (msg.documentCreationDate.hasOwnProperty(&apos;dateTo&apos;)) {
		var dateTo = getXDSDocumentEntryCreationTimeTo(msg.documentCreationDate.dateTo.toString());
		if (dateTo) parameterList += dateTo;
	}	
}

// XDSDocumentEntryServiceStartTimeFrom (OPTIONAL) [0..1]
// XDSDocumentEntryServiceStartTimeTo (OPTIONAL) [0..1]
if (msg.hasOwnProperty(&apos;serviceDate&apos;)) {
	
	if (msg.serviceDate.hasOwnProperty(&apos;dateFrom&apos;)) {
		var serviceFrom = getXDSDocumentEntryServiceStartTimeFrom(msg.serviceDate.dateFrom.toString());
		if (serviceFrom) parameterList += serviceFrom;
	}
	
	if (msg.serviceDate.hasOwnProperty(&apos;dateTo&apos;)) {
		var serviceTo = getXDSDocumentEntryServiceStartTimeTo(msg.serviceDate.dateTo.toString());
		if (serviceTo) parameterList += serviceTo;
	}	
}

// XDSDocumentEntryType (OPTIONAL) [0..*]
var docEntryType = getXDSDocumentEntryType();
if (docEntryType) parameterList += docEntryType;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Store Query Parameters</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Pretty print entry slots
var list = &lt;urn2:list xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;/&gt;;
list.appendChild(parameterList);

var params = list.toString().replace(&apos;&lt;urn2:list xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;&apos;, &apos;&apos;);
params = params.replace(&apos;&lt;/urn2:list&gt;&apos;, &apos;&apos;);

channelMap.put(&apos;PARAMLIST&apos;, params.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>5</metaDataId>
          <name>XCA Endpoint</name>
          <properties class="com.mirth.connect.connectors.interop.xca.shared.XCADispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
    <trustedCertificateAliases>
      <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>&lt;Using Built-in Default WSDL&gt;</wsdlUrl>
            <service>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Service</service>
            <port>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Port_Soap</port>
            <operation>RespondingGateway_CrossGatewayQuery</operation>
            <locationURI>${URL}</locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope>&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:urn=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0&quot; xmlns:urn1=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
   &lt;soap:Header&gt;${SOAP_HEADER}&lt;/soap:Header&gt;
   &lt;soap:Body&gt;
      &lt;urn:AdhocQueryRequest id=&quot;${MSG_ID}&quot; federated=&quot;false&quot; startIndex=&quot;0&quot; maxResults=&quot;-1&quot;&gt;
         &lt;urn:ResponseOption returnType=&quot;LeafClass&quot; returnComposedObjects=&quot;true&quot;/&gt;
         &lt;urn2:AdhocQuery id=&quot;urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d&quot; home=&quot;${HomeCommunityId}&quot; lid=&quot;urn:oasis:names:tc:ebxml-regrep:query:AdhocQueryRequest&quot; objectType=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot; status=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
		${PARAMLIST}
		&lt;/urn2:AdhocQuery&gt;
      &lt;/urn:AdhocQueryRequest&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</envelope>
            <oneWay>false</oneWay>
            <headers class="linked-hash-map"/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction>urn:ihe:iti:2007:CrossGatewayQuery</soapAction>
            <wsdlDefinitionMap>
              <map class="linked-hash-map">
                <entry>
                  <string>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Service</string>
                  <com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                    <map class="linked-hash-map">
                      <entry>
                        <string>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Port_Soap</string>
                        <com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                          <operations>
                            <string>RespondingGateway_CrossGatewayQuery</string>
                          </operations>
                          <actions>
                            <string>urn:ihe:iti:2007:CrossGatewayQuery</string>
                          </actions>
                        </com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                      </entry>
                    </map>
                  </com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                </entry>
              </map>
            </wsdlDefinitionMap>
            <tcpMode>false</tcpMode>
            <remoteAddress></remoteAddress>
            <remotePort></remotePort>
            <useUDDI>false</useUDDI>
            <uddiSummary></uddiSummary>
            <useSOAPTemplate>true</useSOAPTemplate>
            <useDefaultWsdl>true</useDefaultWsdl>
            <convertResponseToJSON>false</convertResponseToJSON>
            <mustUnderstand>false</mustUnderstand>
            <storeSOAPPayloads>true</storeSOAPPayloads>
            <expandedJsonFormat>false</expandedJsonFormat>
            <validateSAML>false</validateSAML>
            <generateSAML>true</generateSAML>
            <samlGenerationProperties version="4.4.2">
              <homeCommunityId>1.2.3</homeCommunityId>
              <issuerEmail>support@metriport.com</issuerEmail>
              <subjectLocality>127.0.0.1</subjectLocality>
              <subjectLocalityDNS>localhost</subjectLocalityDNS>
              <includeConditions>true</includeConditions>
              <conditionsExpirationDuration>300000</conditionsExpirationDuration>
              <conditionsAudienceUseCustom>false</conditionsAudienceUseCustom>
              <conditionsAudience></conditionsAudience>
              <useSSLManager>true</useSSLManager>
              <keyStorePath></keyStorePath>
              <keyStorePassword></keyStorePassword>
              <keyAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</keyAlias>
              <keyPassword></keyPassword>
              <stringAttributes>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:subject-id</name>
                  <format>URI_REFERENCE</format>
                  <value>Administrator</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization</name>
                  <format>URI_REFERENCE</format>
                  <value>NextGen</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization-id</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:nhin:names:saml:homeCommunityId</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
              </stringAttributes>
              <hl7Attributes>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xacml:2.0:subject:role</name>
                  <format>URI_REFERENCE</format>
                  <tagName>Role</tagName>
                  <code>224608005</code>
                  <codeSystem>2.16.840.1.113883.6.96</codeSystem>
                  <codeSystemName>SNOMED_CT</codeSystemName>
                  <displayName>Administrative healthcare staff</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:purposeofuse</name>
                  <format>URI_REFERENCE</format>
                  <tagName>PurposeOfUse</tagName>
                  <code>TREATMENT</code>
                  <codeSystem>2.16.840.1.113883.3.18.7.1</codeSystem>
                  <codeSystemName>nhin-purpose</codeSystemName>
                  <displayName>Treatment</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
              </hl7Attributes>
            </samlGenerationProperties>
            <useQueryWSDL>true</useQueryWSDL>
          </properties>
          <transformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Set the required variables for the XCA Interop template
var header = &apos;&lt;soap:Action xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&lt;/soap:Action&gt;&apos; +
    &apos;&lt;soap:MessageID xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:uuid:&apos; + msg.id.toString() + &apos;&lt;/soap:MessageID&gt;&apos; +
    &apos;&lt;soap:To xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos; + msg.urlDQ.toString() + &apos;&lt;/soap:To&gt;&apos; +
    &apos;&lt;soap:ReplyTo xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos; +
      &apos;&lt;soap:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/soap:Address&gt;&apos; +
   &apos;&lt;/soap:ReplyTo&gt;&apos;;
channelMap.put(&apos;SOAP_HEADER&apos;, header.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Body</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;HomeCommunityId&apos;, msg.homeCommunityId.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var xml = null;

var 	ack= &apos;&apos;, 
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	var soap = String(getBase64Body(msg));

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());
		
		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
		soapReason = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();
		
		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);
		
		return;
		
	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

		// Validate by generating the XML object
		xml = new XML(xml);
		
		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());
	
		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());
		
	}
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper) 
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found. 


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		homeCommunityId = xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();

		// Store for the next channel
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);		
	}
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches 
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	// TODO: Define additional processing logic here

	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);	

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request. 
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded 
// with other requests and does not expect to answer for a significant period of time. 
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while 
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var reason = &apos;&apos;;
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
	}

	channelMap.put(&apos;RESULT&apos;, reason.toString().trim());	

	// Stop further processing
	return;
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>XCA Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&apos;ITI38PROCESSOR&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-39 Interface</name>
      <description>XCA ITI-39 Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCA ITI-39 [Cross Gateway Retrieve] Processor channel&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadr</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}



// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {	

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {
		
		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);		
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());
		
	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD Bulk Interface
globalMap.put(&apos;XCAITI39Interface&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992521467</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>XCA ITI-39 Processor</name>
      <description>XCA ITI-39 Processor channel&#xd;
 - Generates ITI-38 &quot;Cross Gateway Retrieve&quot; SOAP message&#xd;
 - Calls XCA endpoint&#xd;
 - Processes responses&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The required FHIR Patient resource is missing. The processing has been stopped.&apos;;

// The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient Registry Query By Demographics] message
// The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By Demographics] message

/*
To ensure the XML is valid, parameters must be in the following order:
	livingSubjectAdministrativeGender
	livingSubjectBirthPlaceAddress
	livingSubjectBirthPlaceName
	livingSubjectBirthTime
	livingSubjectDeceasedTime	-- Not used in XCPD ITI-55 query 
	livingSubjectId
	livingSubjectName
	mothersMaidenName
	otherIDsScopingOrganization	-- Not used in XCPD ITI-55 query
	patientAddress
	patientStatusCode			-- Not used in XCPD ITI-55 query
	patientTelecom
	principalCareProviderId
	principalCareProvisionId		-- Not used in XCPD ITI-55 query
*/

var patient = msg.patientResource;
var parameterList = new XMLList();

// Values from extensions
var	birthPlaceAddress = null, 
	birthDateTime = null, 
	mothersMaidenName = null;

if (patient.hasOwnProperty(&apos;extension&apos;)) {	
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; == entry.url.toString();});
		birthPlaceAddress = patient.extension[i].valueAddress;
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; == entry.url.toString();});
		birthDateTime = patient.extension[i].valueDateTime.toString();
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; == entry.url.toString();});
		mothersMaidenName = patient.extension[i].valueString.toString();
	} catch(ex) {}
}

// This query parameter is a code representing the administrative gender of a living subject in a patient registry
// livingSubjectAdministrativeGender [0..1], value [1..1]
if (patient.hasOwnProperty(&apos;gender&apos;)) {
	var gender = getLivingSubjectAdministrativeGender(patient);
	if (gender) parameterList += gender;
}


// This query parameter is a patient&apos;s birthplace represented as an address
// livingSubjectBirthPlaceAddress [0..1], value [1..*]
if (birthPlaceAddress) {
	var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
	if (address) parameterList += address;
}


// This query parameter is a patient&apos;s birthplace represented as a place name
// livingSubjectBirthPlaceName [0..1], value [1..*]
var birthPlace = getLivingSubjectBirthPlaceName(patient);
if (birthPlace) parameterList += birthPlace;


// This query parameter is the birth date of a living subject
// livingSubjectBirthTime [0..1], value [1..1]
var birthTime = null;
if (birthDateTime) {
	birthTime = getLivingSubjectBirthTime(birthDateTime);
} else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
	birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
}
if (birthTime) parameterList += birthTime;


// This query parameter is an identifier for a living subject. 
// This is NOT the identifier assigned by the target registry. 
// In fact, the identifier has no context (scoping organization) other than the namespace from which the identifier was issued (OID root).
// livingSubjectId [0..*], value [1..*]
var patientID = getLivingSubjectId(patient);
if (patientID) parameterList += patientID;


// This query parameter is the name of a living subject.
// If multiple instances of LivingSubjectName are provided, the receiver must consider them as possible alternatives, logically connected with an &quot;or&quot;.
// livingSubjectName [0..*], value [1..1]
if (patient.hasOwnProperty(&apos;name&apos;)) {
	patient.name.forEach(function(entry) {
		var name = getLivingSubjectName(entry);
		if (name) parameterList += name;
	});
}


// This query parameter is the maiden name of a focal person&apos;s mother. 
// It is included as a parameter because it is a common attribute for confirming the identity of persons in some registries. 
// mothersMaidenName [0..*], value [1..1]
if (mothersMaidenName) {
	var mMaidenName = getMothersMaidenName(mothersMaidenName);
	if (mMaidenName) parameterList += mMaidenName;
}


// This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry.
// There shall be only a single PatientAddress element.
// Multiple instances of the value element within a Patient Address may be specified and are combined with OR logic.
// patientAddress [0..1], value [1..*]
if (patient.hasOwnProperty(&apos;address&apos;)) {
	var address = getPatientAddress(patient.address);
	if (address) parameterList += address;
}


// This query parameter is a telecommunications address for communicating with a living subject in the context of the target patient registry. 
// It could be a telephone number, fax number or even an email address. There shall be only a single PatientTelecom element.
// Multiple instances of the value element within a PatientTelecom may be specified and are combined with OR logic.
// patientTelecom [0..*] getPatientTelecom()
if (patient.hasOwnProperty(&apos;telecom&apos;)) {
	var telecom = getPatientTelecom(patient.telecom);
	if (telecom) parameterList += telecom;
}


// This query parameter is the care provider identifier of a person who has been assigned as the principal care provider of this patient. 
// The requestor may specify multiple PrincipalCareProviderId elements which responder shall consider as possible alternatives, logically connected with an &quot;or&quot;.
// principalCareProviderId [0..*], value [1..1] 
if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
	msg.principalCareProviderIds.forEach(function(id) {
		var provider = getPrincipalCareProviderId(id);
		if (provider) parameterList += provider;
	});
}


// ========== Following parameters are present in PRPA_MT201306UV02 but not used in PRPA_MT201306IHEPCD ==========
// This query parameter is the death date of a living subject. It is used to find patients who have died on a known date or within a date interval
// livingSubjectDeceasedTime [0..*]

// This query parameter is another organization that has registered the focal patient in its registry. 
// It is used to find living subjects who have been registered by a particular organization.
// otherIDsScopingOrganization [0..*]

// This query parameter is the status of a record in the target patient registry. 
// It is used to find records in a particular state such as &quot;active&quot; or &quot;completed&quot;.
// patientStatusCode [0..*]

// This query parameter is the identifier the explicit acceptance for some aspect of a patient&apos;s care by a health care provider. 
// This identifies a Care Provision act.
// principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Generate the initial SOAP message
var soap = getSOAPEnvelope(msg.urlDQ.toString(), &apos;urn:ihe:iti:2007:CrossGatewayQuery&apos;);

// Generate PRPA_IN201305UV02 [Patient Registry Find Candidates Query] message
var receiver = getHL7v3Receiver(msg.gatewayOID.toString(), msg.urlXCPD.toString());
var sender = getHL7v3Sender($cfg(&apos;HL7v3.Sender.OID&apos;), $cfg(&apos;HL7v3.Sender.Name&apos;));
var xca = getXCARequest($cfg(&apos;HL7v3.Sender.OID&apos;), receiver, sender);


// Set HL7v3 namespace
default xml namespace = &quot;urn:hl7-org:v3&quot;;
xca = new XML(xca.toString());

soap.*::Body.setChildren(xca);
channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCA Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>false</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
    <trustedCertificateAliases>
      <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${URL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
              <entry>
                <string>Accept</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>true</responseXmlBody>
            <responseParseMultipart>false</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/soap+xml</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${SOAP}</content>
            <contentType>application/soap+xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var xml = null;

var 	ack= &apos;&apos;, 
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	var soap = String(getBase64Body(msg));

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());
		
		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
		soapReason = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();
		
		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);
		
		return;
		
	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

		// Validate by generating the XML object
		xml = new XML(xml);
		
		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());
	
		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());
		
	}
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper) 
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found. 


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		homeCommunityId = xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();

		// Store for the next channel
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);		
	}
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches 
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	// TODO: Define additional processing logic here

	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);	

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request. 
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded 
// with other requests and does not expect to answer for a significant period of time. 
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while 
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var reason = &apos;&apos;;
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
	}

	channelMap.put(&apos;RESULT&apos;, reason.toString().trim());	

	// Stop further processing
	return;
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992395659</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>6cdb6776-3488-47c6-8c90-2015ea051f93</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>XCPD App Interface</name>
      <description>XCPD App Interface channel&#xd;
 - forwards a single request back to the calling app or DB&#xd;
&#xd;
Last updated: Nov 23 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>Auto-generate (Before processing)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>50</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements/>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>2</metaDataId>
          <name>App Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD ITI-55 Processor
globalMap.put(&apos;XCPDAPPINTERFACE&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701202031884</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Bulk Interface</name>
      <description>XCPD Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCPD Interface channel&#xd;
 - takes individual requests and sends to the XCPD Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
Last updated: Nov 27 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4.2</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {	

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) { 
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {		
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0, 
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {	
	
		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {
			
			if (!entry.hasOwnProperty(&apos;xcpdGateways&apos;) || 0 == entry.xcpdGateways.length) {
				errorCount++;
			} else if (!entry.hasOwnProperty(&apos;patientResource&apos;)) {
				errorCount++;
			}
			
		} catch(ex) {errorCount++}
	
		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {			
			var result = router.routeMessageByChannelId($g(&apos;XCPDINTERFACE&apos;), JSON.stringify(entry));			
		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701193043141</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>79208c1b-3cbb-4d6e-aeb3-a8387cee4f93</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD ITI-55 Processor</name>
      <description>XCPD ITI-55 Processor channel&#xd;
 - Generates ITI-55 &quot;Cross Gateway Patient Discovery&quot; SOAP message&#xd;
 - Calls XCPD endpoint&#xd;
 - Processes responses&#xd;
&#xd;
TODO:&#xd;
 - Process Patient from the response&#xd;
 - Remove Patient in case of No match or Failure&#xd;
&#xd;
Last updated: Nov 29 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>Auto-generate (Before processing)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>20</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set Stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store for stat
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());
channelMap.put(&apos;PATIENT_ID&apos;, msg.patientResource.id.toString());

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlXCPD.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The required FHIR Patient resource is missing. The processing has been stopped.&apos;;

// The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient Registry Query By Demographics] message
// The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By Demographics] message

/*
To ensure the XML is valid, parameters must be in the following order:
	livingSubjectAdministrativeGender
	livingSubjectBirthPlaceAddress
	livingSubjectBirthPlaceName
	livingSubjectBirthTime
	livingSubjectDeceasedTime	-- Not used in XCPD ITI-55 query 
	livingSubjectId
	livingSubjectName
	mothersMaidenName
	otherIDsScopingOrganization	-- Not used in XCPD ITI-55 query
	patientAddress
	patientStatusCode			-- Not used in XCPD ITI-55 query
	patientTelecom
	principalCareProviderId
	principalCareProvisionId		-- Not used in XCPD ITI-55 query
*/

var patient = msg.patientResource;
var parameterList = new XMLList();

// Values from extensions
var	birthPlaceAddress = null, 
	birthDateTime = null, 
	mothersMaidenName = null;

if (patient.hasOwnProperty(&apos;extension&apos;)) {	
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; == entry.url.toString();});
		birthPlaceAddress = patient.extension[i].valueAddress;
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; == entry.url.toString();});
		birthDateTime = patient.extension[i].valueDateTime.toString();
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; == entry.url.toString();});
		mothersMaidenName = patient.extension[i].valueString.toString();
	} catch(ex) {}
}

// This query parameter is a code representing the administrative gender of a living subject in a patient registry
// livingSubjectAdministrativeGender [0..1], value [1..1]
if (patient.hasOwnProperty(&apos;gender&apos;)) {
	var gender = getLivingSubjectAdministrativeGender(patient);
	if (gender) parameterList += gender;
}


// This query parameter is a patient&apos;s birthplace represented as an address
// livingSubjectBirthPlaceAddress [0..1], value [1..*]
if (birthPlaceAddress) {
	var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
	if (address) parameterList += address;
}


// This query parameter is a patient&apos;s birthplace represented as a place name
// livingSubjectBirthPlaceName [0..1], value [1..*]
var birthPlace = getLivingSubjectBirthPlaceName(patient);
if (birthPlace) parameterList += birthPlace;


// This query parameter is the birth date of a living subject
// livingSubjectBirthTime [0..1], value [1..1]
var birthTime = null;
if (birthDateTime) {
	birthTime = getLivingSubjectBirthTime(birthDateTime);
} else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
	birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
}
if (birthTime) parameterList += birthTime;


// This query parameter is an identifier for a living subject. 
// This is NOT the identifier assigned by the target registry. 
// In fact, the identifier has no context (scoping organization) other than the namespace from which the identifier was issued (OID root).
// livingSubjectId [0..*], value [1..*]
var patientID = getLivingSubjectId(patient);
if (patientID) parameterList += patientID;


// This query parameter is the name of a living subject.
// If multiple instances of LivingSubjectName are provided, the receiver must consider them as possible alternatives, logically connected with an &quot;or&quot;.
// livingSubjectName [0..*], value [1..1]
if (patient.hasOwnProperty(&apos;name&apos;)) {
	patient.name.forEach(function(entry) {
		var name = getLivingSubjectName(entry);
		if (name) parameterList += name;
	});
}


// This query parameter is the maiden name of a focal person&apos;s mother. 
// It is included as a parameter because it is a common attribute for confirming the identity of persons in some registries. 
// mothersMaidenName [0..*], value [1..1]
if (mothersMaidenName) {
	var mMaidenName = getMothersMaidenName(mothersMaidenName);
	if (mMaidenName) parameterList += mMaidenName;
}


// This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry.
// There shall be only a single PatientAddress element.
// Multiple instances of the value element within a Patient Address may be specified and are combined with OR logic.
// patientAddress [0..1], value [1..*]
if (patient.hasOwnProperty(&apos;address&apos;)) {
	var address = getPatientAddress(patient.address);
	if (address) parameterList += address;
}


// This query parameter is a telecommunications address for communicating with a living subject in the context of the target patient registry. 
// It could be a telephone number, fax number or even an email address. There shall be only a single PatientTelecom element.
// Multiple instances of the value element within a PatientTelecom may be specified and are combined with OR logic.
// patientTelecom [0..*] getPatientTelecom()
if (patient.hasOwnProperty(&apos;telecom&apos;)) {
	var telecom = getPatientTelecom(patient.telecom);
	if (telecom) parameterList += telecom;
}


// This query parameter is the care provider identifier of a person who has been assigned as the principal care provider of this patient. 
// The requestor may specify multiple PrincipalCareProviderId elements which responder shall consider as possible alternatives, logically connected with an &quot;or&quot;.
// principalCareProviderId [0..*], value [1..1] 
if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
	msg.principalCareProviderIds.forEach(function(id) {
		var provider = getPrincipalCareProviderId(id);
		if (provider) parameterList += provider;
	});
}


channelMap.put(&apos;PARAMETERS&apos;, parameterList);

// ========== Following parameters are present in PRPA_MT201306UV02 but not used in PRPA_MT201306IHEPCD ==========
// This query parameter is the death date of a living subject. It is used to find patients who have died on a known date or within a date interval
// livingSubjectDeceasedTime [0..*]

// This query parameter is another organization that has registered the focal patient in its registry. 
// It is used to find living subjects who have been registered by a particular organization.
// otherIDsScopingOrganization [0..*]

// This query parameter is the status of a record in the target patient registry. 
// It is used to find records in a particular state such as &quot;active&quot; or &quot;completed&quot;.
// patientStatusCode [0..*]

// This query parameter is the identifier the explicit acceptance for some aspect of a patient&apos;s care by a health care provider. 
// This identifies a Care Provision act.
// principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD Interop Endpoint</name>
          <properties class="com.mirth.connect.connectors.interop.xcpd.shared.XCPDDispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
    <trustedCertificateAliases>
      <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>carequality</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>&lt;Using Built-in Default WSDL&gt;</wsdlUrl>
            <service>{urn:ihe:iti:xcpd:2009}RespondingGateway_Service</service>
            <port>{urn:ihe:iti:xcpd:2009}RespondingGateway_Port_Soap</port>
            <operation>RespondingGateway_PRPA_IN201305UV02</operation>
            <locationURI>${URL}</locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope>&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
  &lt;soap:Header&gt;${SOAP_HEADER}&lt;/soap:Header&gt;
  &lt;soap:Body&gt;
    &lt;urn:PRPA_IN201305UV02 ITSVersion=&quot;XML_1.0&quot;&gt;
      &lt;urn:id extension=&quot;${ID_EXT}&quot; root=&quot;${ID_ROOT}&quot;/&gt;
      &lt;urn:creationTime value=&quot;${CREATION_TIME}&quot;/&gt;
      &lt;urn:interactionId extension=&quot;PRPA_IN201305UV02&quot; root=&quot;2.16.840.1.113883.1.6&quot;/&gt;
      &lt;urn:processingCode code=&quot;T&quot;/&gt;
      &lt;urn:processingModeCode code=&quot;T&quot;/&gt;
      &lt;urn:acceptAckCode code=&quot;AL&quot;/&gt;
      &lt;urn:receiver typeCode=&quot;RCV&quot;&gt;
        &lt;urn:device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
          &lt;urn:id root=&quot;${RCV_ID}&quot;/&gt;
          &lt;urn:telecom value=&quot;${RCV_URL}&quot;/&gt;
        &lt;/urn:device&gt;
      &lt;/urn:receiver&gt;
      &lt;urn:sender typeCode=&quot;SND&quot;&gt;
        &lt;urn:device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
          &lt;urn:id root=&quot;${SND_OID}&quot;/&gt;
          &lt;urn:asAgent classCode=&quot;AGNT&quot;&gt;
            &lt;urn:representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;urn:id root=&quot;${SND_OID}&quot;/&gt;
              &lt;urn:name&gt;${SND_NAME}&lt;/urn:name&gt;
            &lt;/urn:representedOrganization&gt;
          &lt;/urn:asAgent&gt;
        &lt;/urn:device&gt;
      &lt;/urn:sender&gt;
      &lt;urn:controlActProcess classCode=&quot;CACT&quot; moodCode=&quot;EVN&quot;&gt;${ACT_PAYLOAD}&lt;/urn:controlActProcess&gt;
    &lt;/urn:PRPA_IN201305UV02&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</envelope>
            <oneWay>false</oneWay>
            <headers class="linked-hash-map"/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction>urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery</soapAction>
            <wsdlDefinitionMap>
              <map class="linked-hash-map">
                <entry>
                  <string>{urn:ihe:iti:xcpd:2009}RespondingGateway_Service</string>
                  <com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                    <map class="linked-hash-map">
                      <entry>
                        <string>{urn:ihe:iti:xcpd:2009}RespondingGateway_Port_Soap</string>
                        <com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                          <operations>
                            <string>RespondingGateway_PRPA_IN201305UV02</string>
                          </operations>
                          <actions>
                            <string>urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery</string>
                          </actions>
                        </com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                      </entry>
                    </map>
                  </com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                </entry>
              </map>
            </wsdlDefinitionMap>
            <tcpMode>false</tcpMode>
            <remoteAddress></remoteAddress>
            <remotePort></remotePort>
            <useUDDI>false</useUDDI>
            <uddiSummary></uddiSummary>
            <useSOAPTemplate>true</useSOAPTemplate>
            <useDefaultWsdl>true</useDefaultWsdl>
            <convertResponseToJSON>false</convertResponseToJSON>
            <mustUnderstand>false</mustUnderstand>
            <storeSOAPPayloads>true</storeSOAPPayloads>
            <expandedJsonFormat>false</expandedJsonFormat>
            <validateSAML>false</validateSAML>
            <generateSAML>true</generateSAML>
            <samlGenerationProperties version="4.4.2">
              <homeCommunityId>2.16.840.1.113883.3.9621</homeCommunityId>
              <issuerEmail>support@metriport.com</issuerEmail>
              <subjectLocality>127.0.0.1</subjectLocality>
              <subjectLocalityDNS>localhost</subjectLocalityDNS>
              <includeConditions>true</includeConditions>
              <conditionsExpirationDuration>300000</conditionsExpirationDuration>
              <conditionsAudienceUseCustom>false</conditionsAudienceUseCustom>
              <conditionsAudience></conditionsAudience>
              <useSSLManager>true</useSSLManager>
              <keyStorePath></keyStorePath>
              <keyStorePassword></keyStorePassword>
              <keyAlias>carequality</keyAlias>
              <keyPassword></keyPassword>
              <stringAttributes>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:subject-id</name>
                  <format>URI_REFERENCE</format>
                  <value>Administrator</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization</name>
                  <format>URI_REFERENCE</format>
                  <value>Metriport</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization-id</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:nhin:names:saml:homeCommunityId</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
              </stringAttributes>
              <hl7Attributes>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xacml:2.0:subject:role</name>
                  <format>URI_REFERENCE</format>
                  <tagName>Role</tagName>
                  <code>224608005</code>
                  <codeSystem>2.16.840.1.113883.6.96</codeSystem>
                  <codeSystemName>SNOMED_CT</codeSystemName>
                  <displayName>Administrative healthcare staff</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:purposeofuse</name>
                  <format>URI_REFERENCE</format>
                  <tagName>PurposeOfUse</tagName>
                  <code>TREATMENT</code>
                  <codeSystem>2.16.840.1.113883.3.18.7.1</codeSystem>
                  <codeSystemName>nhin-purpose</codeSystemName>
                  <displayName>Treatment</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
              </hl7Attributes>
            </samlGenerationProperties>
          </properties>
          <transformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Set the required variables for the XCPD Interop template
var header = &apos;&lt;wsa:To xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; soap:mustUnderstand=&quot;1&quot;&gt;&apos; + msg.urlXCPD.toString() + &apos;&lt;/wsa:To&gt;&apos; +
		&apos;&lt;wsa:Action xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; soap:mustUnderstand=&quot;1&quot;&gt;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&lt;/wsa:Action&gt;&apos; +
		&apos;&lt;wsa:MessageID xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:uuid:&apos; + msg.id.toString() + &apos;&lt;/wsa:MessageID&gt;&apos; +
		&apos;&lt;wsa:ReplyTo xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos; +
			&apos;&lt;wsa:Address xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;&apos; +
		&apos;&lt;/wsa:ReplyTo&gt;&apos;;
   
channelMap.put(&apos;SOAP_HEADER&apos;, header.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>PRPA Payload</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// Transmission Wrapper settings
channelMap.put(&apos;ID_EXT&apos;, msg.id.toString());
channelMap.put(&apos;ID_ROOT&apos;, $cfg(&apos;HL7v3.Sender.OID&apos;));
channelMap.put(&apos;CREATION_TIME&apos;, DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;));
channelMap.put(&apos;RCV_ID&apos;, msg.gatewayOID.toString());
channelMap.put(&apos;RCV_URL&apos;, msg.urlXCPD.toString());

channelMap.put(&apos;SND_OID&apos;, $cfg(&apos;HL7v3.Sender.OID&apos;));
channelMap.put(&apos;SND_NAME&apos;, $cfg(&apos;HL7v3.Sender.Name&apos;));


// ControlAct payload settings
var controlAct = &lt;urn:controlActProcess classCode=&quot;CACT&quot; moodCode=&quot;EVN&quot; xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				  &lt;urn:code code=&quot;PRPA_TE201305UV02&quot; codeSystem=&quot;2.16.840.1.113883.1.6&quot;/&gt;
				  &lt;urn:queryByParameter&gt;
				    &lt;urn:queryId extension={msg.id.toString()} root={$cfg(&apos;HL7v3.Sender.OID&apos;)}/&gt;
				    &lt;urn:statusCode code=&quot;new&quot;/&gt;
				    &lt;urn:responseModalityCode code=&quot;R&quot;/&gt;
				    &lt;urn:responsePriorityCode code=&quot;I&quot;/&gt;
				    &lt;urn:parameterList/&gt;
				  &lt;/urn:queryByParameter&gt;
				&lt;/urn:controlActProcess&gt;;

var parameterList = channelMap.get(&apos;PARAMETERS&apos;);
if (parameterList &amp;&amp; parameterList.length() &gt; 0) {
	// Add search parameters	
	controlAct.*::queryByParameter.*::parameterList.appendChild(parameterList);

	// Retrieve all child elements of the controlAct
	var controlActString = controlAct.toString().replace(&apos;&lt;urn:controlActProcess xmlns:urn=&quot;urn:hl7-org:v3&quot; classCode=&quot;CACT&quot; moodCode=&quot;EVN&quot;&gt;&apos;, &apos;&apos;);
	controlActString = controlActString.replace(&apos;&lt;/urn:controlActProcess&gt;&apos;, &apos;&apos;);
	channelMap.put(&apos;ACT_PAYLOAD&apos;, controlActString.toString());
	
} else {
	throw &apos;XCPD ITI-55 Processor - The query parameter list is not found or empty.&apos;;
}


// Store for further processing
delete msg.urlXCPD;
delete msg.principalCareProviderIds;
channelMap.put(&apos;REQUEST&apos;, msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var soap = msg.toString();
var xml = null;

var 	ack = &apos;&apos;, 
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());
		
		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::Body.*::Fault.*::Code.*::Value.toString();
		soapReason = xml.*::Body.*::Fault.*::Reason.*::Text.toString();
		
		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);

		// Generate response to be sent to the app
		var operationOutcome = getOperationOutcome(channelMap.get(&apos;MSG_ID&apos;));
		var issue = {
					 &quot;severity&quot;: &quot;fatal&quot;,
					 &quot;code&quot;: &quot;structure&quot;,
					 &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
				};
		issue.details.text = soapReason.toString();
		operationOutcome.issue.push(issue);

		var _response = getOperationOutcomeResponse(channelMap.get(&apos;REQUEST&apos;), operationOutcome);
		
		// Send the response back to the app
		var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDAPPINTERFACE&apos;), JSON.stringify(_response));
		//responseMap.put(&apos;XCPD_RESPONSE&apos;, JSON.stringify(_response));
		
		return;
		
	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);
		xml = xml.replace(/xsi:/g, &apos;&apos;);

		// Validate by generating the XML object
		xml = new XML(xml.toString());

		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::acknowledgement.*::typeCode.@code.toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());

		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::controlActProcess.*::queryAck.*::queryResponseCode.@code.toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());
	}
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 1: One Match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper) 
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found. 

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		
		// Store to return
		homeCommunityId = xml.*::controlActProcess.*::subject.*::registrationEvent.*::custodian.*::assignedEntity.*::id.@root.toString();
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);

		var patient = xml.*::controlActProcess.*::subject.*::registrationEvent.*::subject1;
		// TODO: Process Patient

		var _response = getOperationOutcomeResponse(channelMap.get(&apos;REQUEST&apos;), null);
		_response.patientMatch = true;
		_response.homeCommunityId = homeCommunityId;
		delete _response.operationOutcome;
		
		// Send the response back to the app
		var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDAPPINTERFACE&apos;), JSON.stringify(_response));
		//responseMap.put(&apos;XCPD_RESPONSE&apos;, JSON.stringify(_response));

	}
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 2: Multiple Match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// NHIN: The response to IHE XCPD Cross Gateway Patient Discovery Transaction [ITI-55] may contain multiple entries, 
	// but only a single entry per assigning authority is allowed.
	// The choice of allowing one or zero entries per assigning authority is a compromise between false negatives and false positives.
	// Requiring only a single entry per assigning authority may force a responding community to return zero matches because no single choice is appropriate, 
	// thus increasing the likelihood of false negatives.
	
	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches 
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// NHIN: The response to IHE XCPD Cross Gateway Patient Discovery Transaction [ITI-55] may contain multiple entries, 
	// but only a single entry per assigning authority is allowed.
	// The choice of allowing one or zero entries per assigning authority is a compromise between false negatives and false positives.
	// Requiring only a single entry per assigning authority may force a responding community to return zero matches because no single choice is appropriate, 
	// thus increasing the likelihood of false negatives.

	// NHIN: If a responding gateway determines that additional attributes may help to achieve a match, it may respond with a specialized set of error codes.

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 4: No Match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	var operationOutcome = getOperationOutcome(channelMap.get(&apos;MSG_ID&apos;));
	var issue = {
				 &quot;severity&quot;: &quot;information&quot;,
				 &quot;code&quot;: &quot;not-found&quot;,
				 &quot;details&quot;: {&quot;text&quot;: &quot;NF&quot;}
			};
	operationOutcome.issue.push(issue);
	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

	var _response = getOperationOutcomeResponse(channelMap.get(&apos;REQUEST&apos;), operationOutcome);

	// Send the response back to the app
	var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDAPPINTERFACE&apos;), JSON.stringify(_response));
	//responseMap.put(&apos;XCPD_RESPONSE&apos;, JSON.stringify(_response));

	// Stop further processing
	return;
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 5: Application Error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request. 
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded 
// with other requests and does not expect to answer for a significant period of time. 
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while 
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var operationOutcome = getOperationOutcome(channelMap.get(&apos;MSG_ID&apos;));

	try {
		var issue = {
					 &quot;severity&quot;: &quot;error&quot;,
					 &quot;code&quot;: &quot;structure&quot;,
					 &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
				};
		issue.code = xml.*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString();
		issue.details.text = xml.*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;text&apos;].toString();
		operationOutcome.issue.push(issue);
	} catch(e) {}
	
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
		var issue = {
					 &quot;severity&quot;: &quot;warning&quot;,
					 &quot;code&quot;: &quot;invalid&quot;,
					 &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
				};
		issue.details.text = trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString();
		operationOutcome.issue.push(issue);		
	}

	var _response = getOperationOutcomeResponse(channelMap.get(&apos;REQUEST&apos;), operationOutcome);
	
	// Send the response back to the app
	var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDAPPINTERFACE&apos;), JSON.stringify(_response));
	//responseMap.put(&apos;XCPD_RESPONSE&apos;, JSON.stringify(_response));

	// Stop further processing
	return;
	
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ICAgIDxQUlBBX0lOMjAxMzA2VVYwMiBJVFNWZXJzaW9uPSJYTUxfMS4wIj4KICAgICAgPGlkIHJvb3Q9ImVhMDMzYjNkLTVlZmYtNGQzNS1hYmU3LTFhMWRjZWQxNGE2NiIvPgogICAgICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIyMDIzMTEyODE4MDcwNS0wNjAwIi8+CiAgICAgIDxpbnRlcmFjdGlvbklkIGV4dGVuc2lvbj0iUFJQQV9JTjIwMTMwNlVWMDIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuNiIvPgogICAgICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0iVCIvPgogICAgICA8cHJvY2Vzc2luZ01vZGVDb2RlIGNvZGU9IlQiLz4KICAgICAgPGFjY2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICAgICAgPHJlY2VpdmVyIHR5cGVDb2RlPSJSQ1YiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICA8aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy45NjIxIi8+CiAgICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgPGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuOTYyMSIvPgogICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgPC9hc0FnZW50PgogICAgICAgIDwvZGV2aWNlPgogICAgICA8L3JlY2VpdmVyPgogICAgICA8c2VuZGVyIHR5cGVDb2RlPSJTTkQiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICA8aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy41NjQuMSIvPgogICAgICAgICAgPHRlbGVjb20gdmFsdWU9Imh0dHBzOi8vc2ZkLW5wLmV0MDEyMS5lcGljaG9zdGVkLmNvbToxNDQzMC9pbnRlcmNvbm5lY3QtY2UtZW52MS93Y2YvZXBpYy5jb21tdW5pdHkuaGllL3hjcGRyZXNwb25kaW5nZ2F0ZXdheXN5bmMuc3ZjL2NlcSIvPgogICAgICAgIDwvZGV2aWNlPgogICAgICA8L3NlbmRlcj4KICAgICAgPGFja25vd2xlZGdlbWVudD4KICAgICAgICA8dHlwZUNvZGUgY29kZT0iQUEiLz4KICAgICAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgIDxpZCBleHRlbnNpb249IjJlMzA0OTE2LTUzOWYtNGEwZS04YzEzLTA3MzQ3YjM4NjA5YSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy45NjIxIi8+CiAgICAgICAgPC90YXJnZXRNZXNzYWdlPgogICAgICA8L2Fja25vd2xlZGdlbWVudD4KICAgICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMwNlVWMDIiIGRpc3BsYXlOYW1lPSIyLjE2Ljg0MC4xLjExMzg4My4xLjYiLz4KICAgICAgICA8YXV0aG9yT3JQZXJmb3JtZXIgdHlwZUNvZGU9IkFVVCI+CiAgICAgICAgICA8YXNzaWduZWREZXZpY2UgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCByb290PSIxLjIuODQwLjExNDM1MC4xLjEzLjExNTExLjMuNy4zLjY4ODg4NC4xMDAuMTAwMCIvPgogICAgICAgICAgPC9hc3NpZ25lZERldmljZT4KICAgICAgICA8L2F1dGhvck9yUGVyZm9ybWVyPgogICAgICAgIDxzdWJqZWN0IGNvbnRleHRDb25kdWN0aW9uSW5kPSJmYWxzZSIgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgPHJlZ2lzdHJhdGlvbkV2ZW50IGNsYXNzQ29kZT0iUkVHIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImFjdGl2ZSIvPgogICAgICAgICAgICA8c3ViamVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgICAgICAgPHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiPgogICAgICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iRVYxMlpHUjdKNks0TUY4IiByb290PSIxLjIuODQwLjExNDM1MC4xLjEzLjExNTExLjMuNy4zLjY4ODg4NC4xMDAuMTAwMCIvPgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgPGdpdmVuPk53aGlub25lPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5Pk53aGluenp6dGVzdHBhdGllbnQ8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPiw8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgICA8dGVsZWNvbSB1c2U9IkhQIiB2YWx1ZT0idGVsOisxLTIwNS0xMTEtMTExMSIvPgogICAgICAgICAgICAgICAgICA8YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlIGNvZGU9Ik0iLz4KICAgICAgICAgICAgICAgICAgPGJpcnRoVGltZSB2YWx1ZT0iMTk4MTAxMDEiLz4KICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjExMDAgdGVzdCBzdHJlZXQ8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgIDxjaXR5PkhlbGVuYTwvY2l0eT4KICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QUw8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjM1MDgwPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgIDxhc090aGVySURzIGNsYXNzQ29kZT0iUEFUIj4KICAgICAgICAgICAgICAgICAgICA8aWQgZXh0ZW5zaW9uPSJFVjEwMDQ1OTAwIiByb290PSIxLjIuODQwLjExNDM1MC4xLjEzLjExNTExLjMuNy4zLjY4ODg4NC4xMDAuMTAwMCIvPgogICAgICAgICAgICAgICAgICAgIDxzY29waW5nT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPGlkIHJvb3Q9IjEuMi44NDAuMTE0MzUwLjEuMTMuMTE1MTEuMy43LjMuNjg4ODg0LjEwMC4xMDAwIi8+CiAgICAgICAgICAgICAgICAgICAgPC9zY29waW5nT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICA8L2FzT3RoZXJJRHM+CiAgICAgICAgICAgICAgICA8L3BhdGllbnRQZXJzb24+CiAgICAgICAgICAgICAgICA8c3ViamVjdE9mMT4KICAgICAgICAgICAgICAgICAgPHF1ZXJ5TWF0Y2hPYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iSUhFX1BEUSIvPgogICAgICAgICAgICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iMTAwIiB4c2k6dHlwZT0iSU5UIi8+CiAgICAgICAgICAgICAgICAgIDwvcXVlcnlNYXRjaE9ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgPC9zdWJqZWN0T2YxPgogICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgPC9zdWJqZWN0MT4KICAgICAgICAgICAgPGN1c3RvZGlhbiB0eXBlQ29kZT0iQ1NUIj4KICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICA8aWQgcm9vdD0iMS4yLjg0MC4xMTQzNTAuMS4xMy4xMTUxMS4zLjcuMy42ODg4ODQuMTAwLjEwMDAiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9Ik5vdEhlYWx0aERhdGFMb2NhdG9yIiBjb2RlU3lzdGVtPSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjIuMjcuMiIvPgogICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgPC9yZWdpc3RyYXRpb25FdmVudD4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHF1ZXJ5QWNrPgogICAgICAgICAgPHF1ZXJ5SWQgZXh0ZW5zaW9uPSIyZTMwNDkxNi01MzlmLTRhMGUtOGMxMy0wNzM0N2IzODYwOWEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuOTYyMSIvPgogICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iZGVsaXZlcmVkUmVzcG9uc2UiLz4KICAgICAgICAgIDxxdWVyeVJlc3BvbnNlQ29kZSBjb2RlPSJPSyIvPgogICAgICAgIDwvcXVlcnlBY2s+CiAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICA8cXVlcnlJZCBleHRlbnNpb249IjJlMzA0OTE2LTUzOWYtNGEwZS04YzEzLTA3MzQ3YjM4NjA5YSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy45NjIxIi8+CiAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJuZXciLz4KICAgICAgICAgIDxyZXNwb25zZU1vZGFsaXR5Q29kZSBjb2RlPSJSIi8+CiAgICAgICAgICA8cmVzcG9uc2VQcmlvcml0eUNvZGUgY29kZT0iSSIvPgogICAgICAgICAgPHBhcmFtZXRlckxpc3Q+CiAgICAgICAgICAgIDxsaXZpbmdTdWJqZWN0QWRtaW5pc3RyYXRpdmVHZW5kZXI+CiAgICAgICAgICAgICAgPHZhbHVlIGNvZGU9Ik0iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMSIvPgogICAgICAgICAgICAgIDxzZW1hbnRpY3NUZXh0PkxpdmluZ1N1YmplY3QuYWRtaW5pc3RyYXRpdmVHZW5kZXI8L3NlbWFudGljc1RleHQ+CiAgICAgICAgICAgIDwvbGl2aW5nU3ViamVjdEFkbWluaXN0cmF0aXZlR2VuZGVyPgogICAgICAgICAgICA8bGl2aW5nU3ViamVjdEJpcnRoVGltZT4KICAgICAgICAgICAgICA8dmFsdWUgdmFsdWU9IjE5ODEwMTAxIi8+CiAgICAgICAgICAgICAgPHNlbWFudGljc1RleHQ+TGl2aW5nU3ViamVjdC5iaXJ0aFRpbWU8L3NlbWFudGljc1RleHQ+CiAgICAgICAgICAgIDwvbGl2aW5nU3ViamVjdEJpcnRoVGltZT4KICAgICAgICAgICAgPGxpdmluZ1N1YmplY3RJZD4KICAgICAgICAgICAgICA8dmFsdWUgZXh0ZW5zaW9uPSI2NjYtMTAtMDAwMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC4xIi8+CiAgICAgICAgICAgICAgPHNlbWFudGljc1RleHQ+TGl2aW5nU3ViamVjdC5pZDwvc2VtYW50aWNzVGV4dD4KICAgICAgICAgICAgPC9saXZpbmdTdWJqZWN0SWQ+CiAgICAgICAgICAgIDxsaXZpbmdTdWJqZWN0TmFtZT4KICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICA8Z2l2ZW4+TldISU5PTkU8L2dpdmVuPgogICAgICAgICAgICAgICAgPGZhbWlseT5OV0hJTlpaWlRFU1RQQVRJRU5UPC9mYW1pbHk+CiAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5MaXZpbmdTdWJqZWN0Lm5hbWU8L3NlbWFudGljc1RleHQ+CiAgICAgICAgICAgIDwvbGl2aW5nU3ViamVjdE5hbWU+CiAgICAgICAgICAgIDxwYXRpZW50VGVsZWNvbT4KICAgICAgICAgICAgICA8dmFsdWUgdmFsdWU9InRlbDoyMDUtMTExLTExMTEiLz4KICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5QYXRpZW50LnRlbGVjb208L3NlbWFudGljc1RleHQ+CiAgICAgICAgICAgIDwvcGF0aWVudFRlbGVjb20+CiAgICAgICAgICAgIDxwcmluY2lwYWxDYXJlUHJvdmlkZXJJZD4KICAgICAgICAgICAgICA8dmFsdWUgZXh0ZW5zaW9uPSIxNjg5MDU1NDUxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgPC9wcmluY2lwYWxDYXJlUHJvdmlkZXJJZD4KICAgICAgICAgIDwvcGFyYW1ldGVyTGlzdD4KICAgICAgICA8L3F1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CiAgICA8L1BSUEFfSU4yMDEzMDZVVjAyPgo=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>XCPD Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

var d1 = responseMap.get(&apos;d1&apos;);

if (d1 &amp;&amp; &apos;ERROR&apos; == d1.getStatus()) try {

	// Generate response to be sent to the app
	var operationOutcome = getOperationOutcome(channelMap.get(&apos;MSG_ID&apos;));
	var issue = {
				 &quot;severity&quot;: &quot;fatal&quot;,
				 &quot;code&quot;: &quot;invalid&quot;,
				 &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
			};
	issue.details.text = d1.getStatusMessage();
	operationOutcome.issue.push(issue);

	var _response = getOperationOutcomeResponse(channelMap.get(&apos;REQUEST&apos;), operationOutcome);
	
	// Send the response back to the app
	var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDAPPINTERFACE&apos;), JSON.stringify(_response));

} catch(ex) {}

return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&apos;ITI55PROCESSOR&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>QUERY_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701283613538</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>7</pruneMetaDataDays>
            <pruneContentDays>7</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>c240418b-26ef-4836-a857-01c74fb07963</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Interface</name>
      <description>XCPD Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCPD ITI-55 Processor channel&#xd;
&#xd;
Last updated: Nov 28 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
  <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
    <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>text/plain</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string></string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {	

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {
		
		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);		
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());
		
	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var xcpdArray = json.xcpdGateways;
delete json.xcpdGateways;

var errorCount = 0;

// Generate XCPD ITI-55 Processor feed for each entry
xcpdArray.forEach(function(entry) { 
	
	try {

		var jsonXCPD = json;
		jsonXCPD.id = entry.id.toString();

		if (entry.hasOwnProperty(&apos;oid&apos;) &amp;&amp; entry.oid.toString().length &gt; 0) {
			jsonXCPD.gatewayOID = entry.oid.toString();
		} else {
			errorCount++;
		}

		if (entry.hasOwnProperty(&apos;url&apos;) &amp;&amp; entry.url.toString().length &gt; 0) {
			jsonXCPD.urlXCPD = entry.url.toString();
		} else {
			errorCount++;
		}
		
		if (0 == errorCount) {
			var result = router.routeMessageByChannelId($g(&apos;ITI55PROCESSOR&apos;), JSON.stringify(jsonXCPD));
		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
		
	} catch(ex) {
		logger.error(&apos;XCPD Interface exception: &apos; + ex);
	}
});

// Destination is not needed
destinationSet.removeAll();</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

globalMap.put(&apos;XCPDINTERFACE&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701196866171</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>7</pruneMetaDataDays>
            <pruneContentDays>7</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
  </channels>
  <channelTags/>
  <alerts/>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="4.4.2">
      <id>c209459e-8282-4ac7-88cb-42cdeec33805</id>
      <name>Common Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1701286167989</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Common library for all channels

Last updated: Nov 28 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>79208c1b-3cbb-4d6e-aeb3-a8387cee4f93</string>
        <string>c240418b-26ef-4836-a857-01c74fb07963</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
        <string>6cdb6776-3488-47c6-8c90-2015ea051f93</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>0dbb568c-4c8b-40cc-8a95-2012fac9ed4d</id>
          <name>Get HL7v3 Message Receiver</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286167995</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates a receiver class from the Transmission Wrapper (MCCI_DM000000UV).

	@param {String} oid - an OID of the receiving organization
	@param {String} url - message receiving endpoint
	@return {Object} return Receiver XML object
*/
function getHL7v3Receiver(oid, url) {

	// Structural attributes are required
	var receiver = &lt;receiver typeCode=&quot;RCV&quot;&gt;
				    &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
				      &lt;id root={oid.toString()}/&gt;
				      &lt;telecom value={url.toString()}/&gt;
		                    &lt;asAgent classCode=&quot;AGNT&quot;&gt;
		                        &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;
		                            &lt;id root={oid.toString()}/&gt;
		                        &lt;/representedOrganization&gt;
		                    &lt;/asAgent&gt;
				    &lt;/device&gt;
				  &lt;/receiver&gt;;

	return receiver;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>0ad796be-24b6-4519-94f9-61449d4a7703</id>
          <name>Get HL7v3 Message Sender</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168015</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates a sender class from the Transmission Wrapper (MCCI_DM000000UV).
	Includes optinal asAgent [0..1] (Agent)	

	@param {String} oid - an OID of the sending organization
	@param {String} name - an OID of the sending organization
	@return {Object} return Receiver XML object
*/
function getHL7v3Sender(oid, name) {

	// Device.id - A unique identifier for the Entity. (REQUIRED)
	// An instance identifier is a unique identifier, not a classifier.

	// Organization.name - A non-unique textual identifier or moniker for the Entity. (OPTIONAL)

	// Structural attributes are required
	
	var sender = &lt;sender typeCode=&quot;SND&quot;&gt;
			    &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
			      &lt;id root={oid.toString()}/&gt;
			      &lt;asAgent classCode=&quot;AGNT&quot;&gt;
			        &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;
			          &lt;id root={oid.toString()}/&gt;
			          &lt;name&gt;{name.toString()}&lt;/name&gt;
			        &lt;/representedOrganization&gt;
			      &lt;/asAgent&gt;
			    &lt;/device&gt;
			  &lt;/sender&gt;;

	if (0 == String(name).length) delete sender.device.asAgent.representedOrganization.name;

	return sender;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>34300954-fc44-4e15-82c7-ed96ac02f8c2</id>
          <name>Get HTTP Content or Body</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168033</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Parse and decodes JSON from the HTTP request

	@param {Object} msg - incoming msg object
	@return {Object} return extracted JSON object
*/
function getBase64Content(msg) {

	var base64 = null, json = null;

	if (msg.hasOwnProperty(&apos;Content&apos;)) try {
		
		// Extract the Base64 encoded HTTP Content
		if (&apos;Base64&apos; == msg.Content.@encoding.toString()) {
			base64 = new java.lang.String(com.mirth.connect.server.userutil.FileUtil.decode(msg.Content.toString()), &quot;UTF-8&quot;);
		} else {
			base64 = msg.Content.toString();
		}

		// Validate by creating JSON object
		json = JSON.parse(base64.toString());
		
	} catch(ex) {
		return ex.toString();
	}

	return json;
}


/**
	Parse and decodes XML from the HTTP content

	@param {Object} msg - incoming msg object
	@return {Object} return extracted XML object
*/
function getBase64Body(msg) {

	var base64 = null, xml = null;

	if (msg.hasOwnProperty(&apos;Body&apos;)) try {
		
		// Extract the Base64 encoded HTTP Body
		if (&apos;Base64&apos; == msg.Body.@encoding.toString()) {
			xml = new java.lang.String(com.mirth.connect.server.userutil.FileUtil.decode(msg.Body.toString()), &quot;UTF-8&quot;);
		} else {
			xml = msg.Body.toString();
		}

		// Validate by creating XML object
		xml = new XML(xml);
		
	} catch(ex) {
		return ex.toString();
	}

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>9f662a05-8a40-4419-8b19-3ad5593952e1</id>
          <name>Get OperationOutcome</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168048</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates FHIR OperationOutcome template in JSON format.

	@param {String} id - logical id
	@return {Object} return OperationOutcome
*/
function getOperationOutcome(id) {

	var json = {
				&quot;resourceType&quot;: &quot;OperationOutcome&quot;,
				&quot;id&quot;: &quot;&quot;,
				&quot;issue&quot;: []
			};
			
	json.id = id.toString();

	return json;	
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>fe7168b2-ffe1-4e9a-b619-12653e378095</id>
          <name>Get SOAP Envelope</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168067</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates an empty SOAP envelope
	The SOAP message is constructed according to the rules set in the WSDL 

	@param {String} endpoint - The endpoint address specified in the WSDL or the supplied end point reference 
	@param {String} action - The action value specified in the WSDL related to a specific IHE profile
	@return {Object} return SOAP message object
*/
function getSOAPEnvelope(endpoint, action) {

	// Expected Action codes:
	// ITI-55 - urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery
	// ITI-38 - urn:ihe:iti:2007:CrossGatewayQuery
	// ITI-39 - urn:ihe:iti:2007:RetrieveDocumentSet (?)

	// All &lt;wsa:Action&gt; elements SHALL have the mustUnderstand attribute set
	//  The &lt;wsa:ReplyTo&gt; element of the initiating message SHALL be present

	var soap = &lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
				&lt;soap:Header&gt;
				&lt;wsa:To soap:mustUnderstand=&quot;1&quot;&gt;{endpoint.toString()}&lt;/wsa:To&gt;
				&lt;wsa:Action soap:mustUnderstand=&quot;1&quot;&gt;{action.toString()}&lt;/wsa:Action&gt;
				&lt;wsa:MessageID&gt;{&apos;urn:uuid:&apos; + UUIDGenerator.getUUID()}&lt;/wsa:MessageID&gt;
				&lt;wsa:ReplyTo&gt;
					&lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
				&lt;/wsa:ReplyTo&gt;
				&lt;/soap:Header&gt;
				&lt;soap:Body&gt;&lt;/soap:Body&gt;
			&lt;/soap:Envelope&gt;;

	return soap;
}</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
    <codeTemplateLibrary version="4.4.2">
      <id>5c4c6ab2-26a7-4878-933d-ae04c2bdeea7</id>
      <name>XCA Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1701286167990</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Cross-Community Access (XCA) library
IHE ITI-38 [Cross Gateway Query] related functions
IHE ITI-39 [Cross Gateway Retrieve] related functions

Last updated: Nov 26 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>64436c91-4c18-4f85-9d6f-e942b70e7fd2</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>f773af16-c61a-4642-b484-8dd9c5bdc437</string>
        <string>6cdb6776-3488-47c6-8c90-2015ea051f93</string>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
        <string>b5b9af30-9fae-4a41-ae80-39ca955f4325</string>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>2e17f9d4-fb39-43ba-87dd-72bac26789ef</string>
        <string>0d35e20f-bc3b-4e88-a8eb-1caf57973922</string>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>0223c1ab-b8ed-487d-82c2-341ae0a4eb9d</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
        <string>1a53f2e3-00e1-4de0-ba87-8bd096c00033</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>0bdba2ea-7155-4963-abae-46b28d322119</id>
          <name>Get DocumentEntryClassCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168097</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryClassCode slot entry

	@param {Object} array - JSON array with code-system pairs
	@return {Object} return XDSDocumentEntryClassCode slot
*/
function getXDSDocumentEntryClassCode(array) {

	// Must be part of one of the following valueSet list [1.3.6.1.4.1.12559.11.4.3.2]
	
	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryClassCode&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList/&gt;
			&lt;/urn2:Slot&gt;;

	array.forEach(entry =&gt; {
		var value = &lt;urn2:Value xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;(&apos;{entry.code.toString() + &apos;^^&apos; + entry.system.toString()}&apos;)&lt;/urn2:Value&gt;;
		xml.*::ValueList.appendChild(value);
	});
	
	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>1dd46381-64c0-4d5c-88b2-9d78c634b23e</id>
          <name>Get DocumentEntryCreationTime slots</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168110</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryCreationTimeFrom slot entry

	@param {String} timestamp - timestamp to convert
	@return {Object} return XDSDocumentEntryCreationTimeFrom slot entry
*/
function getXDSDocumentEntryCreationTimeFrom(timestamp) {

	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryCreationTimeFrom&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList&gt;
					&lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0, 14)}&lt;/urn2:Value&gt;
				&lt;/urn2:ValueList&gt;
			&lt;/urn2:Slot&gt;;

	return xml;
}



/**
	Generates XDSDocumentEntryCreationTimeTo slot entry

	@param {String} timestamp - timestamp to convert
	@return {Object} return XDSDocumentEntryCreationTimeTo slot entry
*/
function getXDSDocumentEntryCreationTimeTo(timestamp) {
	
	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryCreationTimeTo&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList&gt;
					&lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0, 14)}&lt;/urn2:Value&gt;
				&lt;/urn2:ValueList&gt;
			&lt;/urn2:Slot&gt;;

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>5ad26df2-2902-4710-ad58-65306400cceb</id>
          <name>Get DocumentEntryHealthcareFacilityTypeCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168124</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryHealthcareFacilityTypeCode slot entry

	@param {Object} array - JSON array with code-system pairs
	@return {Object} return XDSDocumentEntryHealthcareFacilityTypeCode slot
*/
function getXDSDocumentEntryHealthcareFacilityTypeCode(array) {

	// Values can be taken:
	// - https://validation.sequoiaproject.org/SVSSimulator/browser/valueSet.seam?id=1.3.6.1.4.1.12559.11.4.3.5&amp;cid=95
	// - https://gazelle.ihe.net/RetrieveValueSet?id=1.3.6.1.4.1.12559.11.4.3.5

	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryHealthcareFacilityTypeCode&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList/&gt;
			&lt;/urn2:Slot&gt;;

	array.forEach(entry =&gt; {
		var value = &lt;urn2:Value xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;(&apos;{entry.code.toString() + &apos;^^&apos; + entry.system.toString()}&apos;)&lt;/urn2:Value&gt;;
		xml.*::ValueList.appendChild(value);
	});

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>f3cb147d-50db-4032-b355-d8f693c0da38</id>
          <name>Get DocumentEntryPatientId slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168137</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryPatientId slot with given identifier and assigning authority

	@param {String} identifier - patient&apos;s identifier
	@param {String} authority - patient identity assigning authority in the form of an OID
	@return {Object} return XDSDocumentEntryPatientId slot entry
*/
function getXDSDocumentEntryPatientId(identifier, authority) {

	// The Patient ID shall contain two parts:
	// * Patient Identity Assigning Authority in the form of an OID
	// * An identifier in the above Assigning Authority domain

	var xml = null;

	if (identifier &amp;&amp; authority) {
		xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryPatientId&quot; slotType=&quot;rim:StringValueType&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
		          &lt;urn2:ValueList&gt;
		            &lt;urn2:Value&gt;&apos;{identifier.toString() + &apos;^^^&amp;&apos; + authority + &apos;&amp;ISO&apos;}&apos;&lt;/urn2:Value&gt;
		          &lt;/urn2:ValueList&gt;
		        &lt;/urn2:Slot&gt;;
	}

	return xml;
}
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>97c31212-1d89-43fc-a8e4-2233d56c94a9</id>
          <name>Get DocumentEntryPracticeSettingCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168149</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryPracticeSettingCode slot entry

	@param {Object} array - JSON array with code-system pairs
	@param {String} system - practice setting system value
	@return {Object} return XDSDocumentEntryPracticeSettingCode slot
*/
function getXDSDocumentEntryPracticeSettingCode(array) {

	// Expected values: https://gazelle.ihe.net/RetrieveValueSet?id=1.3.6.1.4.1.12559.11.4.3.6

	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryPracticeSettingCode&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList/&gt;
			&lt;/urn2:Slot&gt;;

	array.forEach(entry =&gt; {
		var value = &lt;urn2:Value xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;(&apos;{entry.code.toString() + &apos;^^&apos; + entry.system.toString()}&apos;)&lt;/urn2:Value&gt;;
		xml.*::ValueList.appendChild(value);
	});

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>b33a12b1-fbf1-4bdf-8bb3-0e7fe686fe4f</id>
          <name>Get DocumentEntryServiceStartTime slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168160</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryServiceStartTimeFrom slot entry

	@param {String} timestamp - timestamp to convert
	@return {Object} return XDSDocumentEntryServiceStartTimeFrom slot entry
*/
function getXDSDocumentEntryServiceStartTimeFrom(timestamp) {

	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryServiceStartTimeFrom&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList&gt;
					&lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0, 14)}&lt;/urn2:Value&gt;
				&lt;/urn2:ValueList&gt;
			&lt;/urn2:Slot&gt;;

	return xml;
}



/**
	Generates XDSDocumentEntryServiceStartTimeTo slot entry

	@param {String} timestamp - timestamp to convert
	@return {Object} return XDSDocumentEntryServiceStartTimeTo slot entry
*/
function getXDSDocumentEntryServiceStartTimeTo(timestamp) {
	
	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryServiceStartTimeTo&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList&gt;
					&lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0, 14)}&lt;/urn2:Value&gt;
				&lt;/urn2:ValueList&gt;
			&lt;/urn2:Slot&gt;;

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>46c7f4ca-1148-4de2-ac9c-b44a2203aad1</id>
          <name>Get DocumentEntryType slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168174</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryType slot with stable and on-demand entries
	The objectType attribute on an ExtrinsicObject (DocumentEntry) is used to distinguish Stable DocumentEntries from On-Demand DocumentEntries

	@return {Object} return description
*/
function getXDSDocumentEntryType() {

	// If no value is specified for DocumentEntryType, the value requesting only Stable Document Entries shall be assumed. 
	// To get all Document Entry types, the query shall contain both of the valid values in the request.

	// urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1 – Stable
	// urn:uuid:34268e47-fdf5-41a6-ba33-82133c465248 – On-Demand

	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryType&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
				&lt;urn2:ValueList&gt;
					&lt;urn2:Value&gt;(&apos;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&apos;,&apos;urn:uuid:34268e47-fdf5-41a6-ba33-82133c465248&apos;)&lt;/urn2:Value&gt;
				&lt;/urn2:ValueList&gt;
			&lt;/urn2:Slot&gt;;

	return xml;			
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>a21f967a-f891-4c59-b7df-2fe0f5bb7297</id>
          <name>Get DocumentStatus slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168185</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XDSDocumentEntryStatus slot with the &apos;Approved&apos; document type

	@return {Object} return XDSDocumentEntryStatus slot
*/
function getXDSDocumentEntryStatus() {

	// Valid Document Status Values:
	// urn:oasis:names:tc:ebxml-regrep:StatusType:Approved
	// urn:oasis:names:tc:ebxml-regrep:StatusType:Deprecated
	
	var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryStatus&quot; xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
		          &lt;urn2:ValueList&gt;
		            &lt;urn2:Value&gt;(&apos;urn:oasis:names:tc:ebxml-regrep:StatusType:Approved&apos;)&lt;/urn2:Value&gt;
		          &lt;/urn2:ValueList&gt;
	        &lt;/urn2:Slot&gt;;

	return xml;
        
}</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
    <codeTemplateLibrary version="4.4.2">
      <id>17457cb7-df91-4475-96e4-0735081f47c2</id>
      <name>XCPD Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1701286167992</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Cross-Community Patient Discovery (XCPD) library
IHE ITI-55 [Cross Gateway Patient Discovery] related functions

Last updated: Nov 29 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>79208c1b-3cbb-4d6e-aeb3-a8387cee4f93</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>c240418b-26ef-4836-a857-01c74fb07963</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
        <string>6cdb6776-3488-47c6-8c90-2015ea051f93</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>2680c088-f2a0-44fa-ae30-4a878bddeceb</id>
          <name>Get GetPatientAddress query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168196</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate PatientAddress query entry
	This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry

	@param {Object} patient - incoming Patient resource
	@return {Object} return XML object representing LivingSubjectBirthPlaceAddress query entry
*/
function getLivingSubjectBirthPlaceAddress(patient) {
	// TODO
	return null;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>b48d59bf-a974-4240-968d-89941abf6a76</id>
          <name>Get ITI-55 Request Template</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168206</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XCPD Cross Gateway Patient Discovery [ITI-55] request template
	
	@param {String} oid - an OID of the sending organization
	@param {Object} receiver - an XML object with the receiver information
	@param {Object} sender - an XML object with the sender information
	@return {Object} return XCPD ITI-55 request payload
*/
function getXCPDRequest(oid, receiver, sender) {

	// queryId - Identifier for the query. It is used to associate this query instance with both the initial response message and with later query interactions. (REQUIRED)
	// Valuing queryId avoids the need for the QueryContinuation and QueryAck classes to carry as much detail information as is carried in the initial query.

	var uuid = UUIDGenerator.getUUID();

	var xml = &lt;PRPA_IN201305UV02 ITSVersion=&quot;XML_1.0&quot; xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;id root={oid.toString()} extension={uuid.toString()}/&gt;
				&lt;creationTime value={DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;)}/&gt;
				&lt;interactionId root=&quot;2.16.840.1.113883.1.6&quot; extension=&quot;PRPA_IN201305UV02&quot;/&gt;
				&lt;processingCode code=&quot;P&quot;/&gt;
				&lt;processingModeCode code=&quot;T&quot;/&gt;
				&lt;acceptAckCode code=&quot;AL&quot;/&gt;
				&lt;controlActProcess classCode=&quot;CACT&quot; moodCode=&quot;EVN&quot;&gt;
					&lt;urn:code code=&quot;PRPA_TE201305UV02&quot; codeSystem=&quot;2.16.840.1.113883.1.6&quot;/&gt;
					&lt;urn:queryByParameter&gt;
						&lt;urn:queryId root={oid.toString()} extension={uuid.toString()}/&gt;
						&lt;urn:statusCode code=&quot;new&quot;/&gt;
						&lt;urn:responseModalityCode code=&quot;R&quot;/&gt;
						&lt;urn:responsePriorityCode code=&quot;I&quot;/&gt;
						&lt;urn:parameterList/&gt;
					&lt;/urn:queryByParameter&gt;
				&lt;/controlActProcess&gt;
			&lt;/PRPA_IN201305UV02&gt;;

	// Sender shall be inserted first to preserve the order
	if (sender) xml.insertChildAfter(xml.acceptAckCode[0], sender);
	if (receiver) xml.insertChildAfter(xml.acceptAckCode[0], receiver);

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>dd295f97-f798-4100-9bb1-5666c638243d</id>
          <name>Get LivingSubjectAdministrativeGender query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168216</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate livingSubjectAdministrativeGender query entry
	This query parameter is a code representing the administrative gender of a living subject in a patient registry

	@param {Object} patient - incoming Patient resource
	@return {Object} return XML object representing LivingSubjectAdministrativeGender query entry
*/
function getLivingSubjectAdministrativeGender(patient) {

	// &apos;Undifferentiated&apos; by default
	var gender = &apos;UN&apos;;

	try {
		if (String(patient.gender).toUpperCase().startsWith(&apos;M&apos;)) gender = &apos;M&apos;
		else if (String(patient.gender).toUpperCase().startsWith(&apos;F&apos;)) gender = &apos;F&apos;
	} catch(ex) {}
	
	var xml = &lt;urn:livingSubjectAdministrativeGender xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:value code={gender.toString()} codeSystem=&quot;2.16.840.1.113883.5.1&quot;/&gt;
				&lt;urn:semanticsText&gt;LivingSubject.administrativeGender&lt;/urn:semanticsText&gt;
			&lt;/urn:livingSubjectAdministrativeGender&gt;;

	return xml;
}
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>fc09daa6-df4a-4d2e-81b1-8108d768d2c5</id>
          <name>Get LivingSubjectBirthPlaceAddress query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168226</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate LivingSubjectBirthPlaceAddress query entry
	This query parameter is a patient&apos;s birthplace represented as an address

	@param {Object} address - birth place Address object from the extension
	@return {Object} return XML object representing LivingSubjectBirthPlaceAddress query entry
*/
function getLivingSubjectBirthPlaceAddress(address) {

	var xml = null;

	try {

		xml = &lt;urn:livingSubjectBirthPlaceAddress xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
		          &lt;urn:value/&gt;
		          &lt;urn:semanticsText&gt;LivingSubject.BirthPlace.Addr&lt;/urn:semanticsText&gt;
		        &lt;/urn:livingSubjectBirthPlaceAddress&gt;;
		
		address.line.forEach(line =&gt; {
			var street = &lt;urn:streetAddressLine xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{line.toString()}&lt;/urn:streetAddressLine&gt;;
			xml.*::value.appendChild(street);
		});
		if (address.hasOwnProperty(&apos;city&apos;)) {
			var city = &lt;urn:city xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{address.city.toString()}&lt;/urn:city&gt;;
			xml.*::value.appendChild(city);
		}
		if (address.hasOwnProperty(&apos;state&apos;)) {
			var state = &lt;urn:state xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{address.state.toString()}&lt;/urn:state&gt;;
			xml.*::value.appendChild(state);
		}
		if (address.hasOwnProperty(&apos;postalCode&apos;)) {
			var postalCode = &lt;urn:postalCode xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{address.postalCode.toString()}&lt;/urn:postalCode&gt;;
			xml.*::value.appendChild(postalCode);
		}
		if (address.hasOwnProperty(&apos;country&apos;)) {
			var country = &lt;urn:country xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{address.country.toString()}&lt;/urn:country&gt;;
			xml.*::value.appendChild(country);
		}
		
	} catch(ex) {}

	return xml;
}
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>baa1beb4-961a-4100-a1b4-96f5d77178f0</id>
          <name>Get LivingSubjectBirthPlaceName query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168236</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate LivingSubjectBirthPlaceName query entry
	This query parameter is a patient&apos;s birthplace represented as a place name

	@param {Object} patient - incoming Patient resource
	@return {Object} return XML object representing LivingSubjectBirthPlaceName query entry
*/
function getLivingSubjectBirthPlaceName(patient) {
	
	var xml = null;
	// TODO: FHIR Patient extensions shall be provided with the patient birth place name

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>e4791a1a-6f15-458e-a557-6cfeb5abbc12</id>
          <name>Get LivingSubjectBirthTime query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168245</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate LivingSubjectBirthTime query entry
	This query parameter is the birth date of a living subject.

	@param {String} date - Patient&apos;s birth date separated by &apos;-&apos;
	@return {Object} return XML object representing LivingSubjectBirthTime query entry
*/
function getLivingSubjectBirthTime(date) {

	var xml = null;

	try {
		xml = &lt;urn:livingSubjectBirthTime xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:value value={date.toString().replace(/-/g, &apos;&apos;)}/&gt;
				&lt;urn:semanticsText&gt;LivingSubject.birthTime&lt;/urn:semanticsText&gt;
			&lt;/urn:livingSubjectBirthTime&gt;;		
	} catch(ex) {}

	return xml;

}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>9e2e027d-c8d0-4b3a-b934-fb0e8174938b</id>
          <name>Get LivingSubjectId query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168254</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate LivingSubjectId query entry
	This query parameter is an identifier for a living subject. This is NOT the identifier assigned by the target registry. 
	In fact, the identifier has no context (scoping organization) other than the namespace from which the identifier was issued (OID root).

	@param {Object} patient - incoming Patient resource
	@return {Object} return XML object representing LivingSubjectId query entry
*/
function getLivingSubjectId(patient) {

	var xml = null;
	var valueList = new XMLList();

	if (patient.hasOwnProperty(&apos;identifier&apos;)) try {

		patient.identifier.forEach(function(entry) {

			if (entry.system.toString().startsWith(&apos;urn:oid:&apos;)) {
				valueList += &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot; root={entry.system.toString().replace(&apos;urn:oid:&apos;, &apos;&apos;)} extension={entry.value.toString()}/&gt;;
				
			} else if (&apos;http://hl7.org/fhir/sid/us-ssn&apos; == entry.system.toString()) {
				valueList += &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot; root=&quot;2.16.840.1.113883.4.1&quot; extension={entry.value.toString()}/&gt;;
				
			} else if (&apos;http://hl7.org/fhir/sid/us-medicare&apos; == entry.system.toString()) {
				valueList += &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot; root=&quot;2.16.840.1.113883.4.572&quot; extension={entry.value.toString()}/&gt;;
				
			} else if (&apos;http://hl7.org/fhir/sid/us-mbi&apos; == entry.system.toString()) {
				valueList += &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot; root=&quot;2.16.840.1.113883.4.927&quot; extension={entry.value.toString()}/&gt;;
			}			
		});
		
	} catch(ex) {}
		
	if (valueList.length() &gt; 0) {
		xml = &lt;urn:livingSubjectId xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:semanticsText&gt;LivingSubject.id&lt;/urn:semanticsText&gt;
			&lt;/urn:livingSubjectId&gt;;		
		xml.insertChildBefore(xml.*::semanticsText[0], valueList);
	}

	return xml;

}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>4b9ae618-4790-4fa4-84e3-3d12b435a3cc</id>
          <name>Get LivingSubjectName query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168266</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generate LivingSubjectName query entry
	This query parameter is the name of a living subject. This query parameter is the name of a person. 
	If multiple instances of LivingSubjectName are provided, the receiver must consider them as possible alternatives, logically connected with an &quot;or&quot;.

	@param {Object} name - a single Patient.name element
	@return {Object} return XML object representing LivingSubjectName query entry
*/
function getLivingSubjectName(name) {

	var xml = null;

	// Only one instance of the value element is allowed. Only some of the name parts may be populated. 
	// If, for example, only the family and given name parts of a person&apos;s name are sent, then the query would match all persons with that family name and given name regardless of their initials. 
	// The use attribute of the value element shall not be set to &quot;SRCH&quot;.

	try {

		xml = &lt;urn:livingSubjectName xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:value/&gt;	
				&lt;urn:semanticsText&gt;LivingSubject.name&lt;/urn:semanticsText&gt;
			&lt;/urn:livingSubjectName&gt;;

		if (name.hasOwnProperty(&apos;family&apos;)) {
			var family = &lt;urn:family xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{name.family.toString()}&lt;/urn:family&gt;;
			xml.*::value.appendChild(family);
		}

		// TODO: Process multiple given names (requires XMLList)		
		if (name.hasOwnProperty(&apos;given&apos;)) {
			var given = &lt;urn:given xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{name.given[0].toString()}&lt;/urn:given&gt;;
			xml.*::value.appendChild(given);
/*			
			name.given.forEach(entry =&gt; {
				var given = &lt;given&gt;{name.given.toString()}&lt;/given&gt;;
				xml.value.appendChild(given);
			});
*/			
		}

	} catch(ex) {}

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>3d28c319-9ade-4af5-8d2b-0de10ca70a07</id>
          <name>Get MothersMaidenName query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168276</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	This query parameter is the maiden name of a focal person&apos;s mother. 
	It is included as a parameter because it is a common attribute for confirming the identity of persons in some registries.
	In this case it may consist of only the given name part, the family name part, or both.

	@param {Object} name - a mother&apos;s maiden name
	@return {Object} return XML object representing LivingSubjectName query entry
*/
function getMothersMaidenName(name) {

	// The FHIR http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName extension allows only a single string value
	var xml = &lt;urn:mothersMaidenName xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
			     &lt;urn:value&gt;{name.toString()}&lt;/urn:value&gt;
			     &lt;urn:semanticsText&gt;Person.MothersMaidenName&lt;/urn:semanticsText&gt;
			   &lt;/urn:mothersMaidenName&gt;;

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>e4460451-6cc5-4310-b08a-68e60cccb3da</id>
          <name>Get OperationOutcome response</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168285</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates XCPD response based on the initial request and OperationOutcome

	@param {Object} request - Initial JSON request
	@param {Object} operationOutcome - FHIR OperationOutcome resource instance
	@return {Object} return JSON response
*/
function getOperationOutcomeResponse(request, operationOutcome) {
	
	var result = request;
	result.patientResource = &apos;Patient/&apos; + channelMap.get(&apos;PATIENT_ID&apos;);
	result.patientMatch = false;
	result.processingTimestamp = DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.sssZ&quot;);
	result.operationOutcome = operationOutcome;

	return result;	
}
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>efbe4cdf-06dc-4182-8533-b5f74142ca8d</id>
          <name>Get PatientAddress query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168297</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates PatientAddress query entry
	This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry.
	There shall be only a single PatientAddress element.
	Multiple instances of the value element within a Patient Address may be specified and are combined with OR logic.

	@param {Object} address - Patient.address element
	@return {Object} return XML object representing PatientAddress query entry
*/
function getPatientAddress(address) {

	var xml = null;
	var valueList = new XMLList();

	try {

		address.forEach(function(addr) {

			var value = &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot;/&gt;;
			
			addr.line.forEach(line =&gt; {
				var street = &lt;urn:streetAddressLine xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{line.toString()}&lt;/urn:streetAddressLine&gt;;
				value.appendChild(street);
			});	
			if (addr.hasOwnProperty(&apos;city&apos;)) {
				var city = &lt;urn:city xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{addr.city.toString()}&lt;/urn:city&gt;;
				value.appendChild(city);
			}
			if (addr.hasOwnProperty(&apos;state&apos;)) {
				var state = &lt;urn:state xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{addr.state.toString()}&lt;/urn:state&gt;;
				value.appendChild(state);
			}
			if (addr.hasOwnProperty(&apos;postalCode&apos;)) {
				var postalCode = &lt;urn:postalCode xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{addr.postalCode.toString()}&lt;/urn:postalCode&gt;;
				value.appendChild(postalCode);
			}
			if (addr.hasOwnProperty(&apos;country&apos;)) {
				var country = &lt;urn:country xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;{addr.country.toString()}&lt;/urn:country&gt;;
				value.appendChild(country);
			}
			valueList += value;
		});

	} catch(ex) {}

	if (valueList.length() &gt; 0) {
		xml = &lt;urn:patientAddress xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:semanticsText&gt;Patient.addr&lt;/urn:semanticsText&gt;
			&lt;/urn:patientAddress&gt;;
		xml.insertChildBefore(xml.*::semanticsText[0], valueList);
	}

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>5518590c-e3f7-4871-85fd-479e5d20bcb4</id>
          <name>Get PatientTelecom query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168306</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates PatientTelecom query entry
	This query parameter is a telecommunications address for communicating with a living subject in the context of the target patient registry. 
	It could be a telephone number, fax number or even an email address. There shall be only a single PatientTelecom element.
	A telecommunications address. The scheme attribute specifies whether this is a telephone number, fax number, email address, etc. 
	Multiple instances of the value element within a PatientTelecom may be specified and are combined with OR logic.

	@param {Object} telecom - Patient.telecom element
	@return {Object} return XML object representing PatientTelecom query entry
*/
function getPatientTelecom(telecom) {

	// TODO: The FHIR ContactPoint.use component is not being processed

	var xml = null;
	var valueList = new XMLList();

	try {
		telecom.forEach(function(tel) {

			var prefix = &apos;&apos;;

			if (tel.hasOwnProperty(&apos;system&apos;)) {
				// Map FHIR ContactPoint.system to HL7v3 syntax
				var prefix = [&apos;tel:&apos;,&apos;fax:&apos;,&apos;email:&apos;,&apos;&apos;,&apos;&apos;,&apos;sms:&apos;,&apos;&apos;][[&apos;phone&apos;,&apos;fax&apos;,&apos;email&apos;,&apos;pager&apos;,&apos;url&apos;,&apos;sms&apos;,&apos;other&apos;].indexOf(tel.system.toString())];
				prefix = (prefix) ? prefix : &apos;&apos;;
			}
			
			var value = &lt;urn:value xmlns:urn=&quot;urn:hl7-org:v3&quot; value={prefix.toString() + tel.value.toString()}/&gt;;			
			valueList += value;
				
		});

	} catch(ex) {}

	if (valueList.length() &gt; 0) {
		xml = &lt;urn:patientTelecom xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
				&lt;urn:semanticsText&gt;Patient.telecom&lt;/urn:semanticsText&gt;
			&lt;/urn:patientTelecom&gt;;
		xml.insertChildBefore(xml.*::semanticsText[0], valueList);
	}

	return xml;
}</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>85bb0933-5012-43ae-993b-cc336daf8104</id>
          <name>Get PrincipalCareProviderId query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1701286168317</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
	Generates 
	This query parameter is the identifier of a health care provider who has explicitly accepted responsibility for some aspect of a patient&apos;s care.
	This identifies a health care provider role.

	@param {String} id - provider&apos;s NPI number
	@return {Object} return XML object representing PrincipalCareProviderId query entry
*/
function getPrincipalCareProviderId(id) {

	// NOTE: Only provider&apos;s NPI numbers are expected

	var xml = null;

	try {
		// 2.16.840.1.113883.4.6 is US NPI OID
		xml = &lt;urn:principalCareProviderId xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
		          &lt;urn:value root=&quot;2.16.840.1.113883.4.6&quot; extension={id.toString()}/&gt;
		        &lt;/urn:principalCareProviderId&gt;;        
	} catch(ex) {}
	

	return xml;

}</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <serverSettings>
    <environmentName></environmentName>
    <clearGlobalMap>true</clearGlobalMap>
    <queueBufferSize>1000</queueBufferSize>
    <defaultMetaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </defaultMetaDataColumns>
    <defaultAdministratorBackgroundColor>
      <red>158</red>
      <green>177</green>
      <blue>201</blue>
      <alpha>255</alpha>
    </defaultAdministratorBackgroundColor>
    <smtpHost></smtpHost>
    <smtpPort></smtpPort>
    <smtpTimeout>5000</smtpTimeout>
    <smtpFrom></smtpFrom>
    <smtpSecure>none</smtpSecure>
    <smtpAuth>false</smtpAuth>
    <smtpUsername></smtpUsername>
    <smtpPassword></smtpPassword>
    <loginNotificationEnabled>false</loginNotificationEnabled>
    <loginNotificationMessage></loginNotificationMessage>
    <administratorAutoLogoutIntervalEnabled>false</administratorAutoLogoutIntervalEnabled>
    <administratorAutoLogoutIntervalField>5</administratorAutoLogoutIntervalField>
  </serverSettings>
  <updateSettings version="4.4.2">
    <statsEnabled>false</statsEnabled>
    <lastStatsTime>1699119869437</lastStatsTime>
  </updateSettings>
  <globalScripts>
    <entry>
      <string>Undeploy</string>
      <string>// This script executes once for each deploy, undeploy, or redeploy task
// if at least one channel was undeployed
// You only have access to the globalMap here to persist data

var conn;
if (globalMap.containsKey(&apos;CONN&apos;)) try {
	
	conn = globalMap.get(&apos;CONN&apos;);
	conn.close();
	globalMap.remove(&apos;CONN&apos;);
	
} catch(ex) {} finally {conn = null;}


return;</string>
    </entry>
    <entry>
      <string>Postprocessor</string>
      <string>// This script executes once after a message has been processed
// This script applies across all channels
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
// You have access to &quot;response&quot;, if returned from the channel postprocessor
return;</string>
    </entry>
    <entry>
      <string>Deploy</string>
      <string>// This script executes once for each deploy or redeploy task
// You only have access to the globalMap here to persist data


return;</string>
    </entry>
    <entry>
      <string>Preprocessor</string>
      <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
    </entry>
  </globalScripts>
  <pluginProperties>
    <entry>
      <string>SSL Manager</string>
      <properties>
        <property name="KeyStore">/u3+7QAAAAIAAAACAAAAAQALY2FyZXF1YWxpdHkAAAGMHV1V3QAABQIwggT+MA4GCisGAQQBKgIR&#xd;
AQEFAASCBOpomsvralRrvbntAw/hPgc459N2G7xc2isU6Zmj1iU2K4sXZSy+yF33NvlnmRLnFbw8&#xd;
HeZcxksrUR/1xa1DKgs2JpT+QGD/JIKqQsfZ/aA9wJ/zHq5PXTzi5UFZ9Bt/xXjKjbdJMMv9Np7K&#xd;
lHXiZrPiESLhrSg3qkd6FxtnCaw6quNhcTwXFzqGEnkUTjWXlorNdYcvy7siC1CpwXufG75/ipmZ&#xd;
jr/EoIHzXT9b9+KiNiSJX+aVgum3fHDlWnrham9+PWuz0w+rHYaiyD5DOpsfquQ/3wiSox1rOXPQ&#xd;
GhL5LMADuaiVTiVrCTZLGd0suHTUi90L+OATN4LkJOhLdQmaKpZvfWA1fBUE49D5r52wjeutuoku&#xd;
O7GEFWI3c9Y4zui2iuQT5XTrH+EZKthIecsQIzuS1v5FRzfrQZBbbhAeszApNcuk6JRBX5ykAzWB&#xd;
nwsESyPahilTnYvSa0Iz04lehvsFIQeM47bAcLD0ly49LXHVUVWHaulNoznDZuw5xP+Fppmyu2Au&#xd;
epw9mkg6aIIukgchOOt1acjdAIpSFUfTq+uHUS8OgtZjlzKDLuv5j815emAMaFo/3ChxXUW24Cp9&#xd;
jx5iw9Ar5lgrTkvvOqkRkiV9UomNlkAiF5QnesCVzJOzycOcrx9ENPrxVDfKI18oFf3/FY1ej2/O&#xd;
6HamPc31YCJ7HK935uY5H0/t7l6feKJtsL1vW/IWjUazfr57e3uD5kdz2TeozsczVP6B//tizHmW&#xd;
9ca9WFlxwq8+PkF04z6sdtX8yHplI+CAXr/PORSroyVfdCpMCrPfEQEhc5BEkxJavXBOaIVBPJuE&#xd;
vbZHl8ILa5KnWe7OSIanqSNXGEiFw19xjJBfpD0kCFrw59SrhCT4qpe0ZFFFULOxRSz90XTkdiCt&#xd;
qKYOLRqqOzOdnv5IPyb36mGEfg7W7k0kcO8Rjtv0Am6Syf3LZmfy6Cy9SRkvOGBLWzcQyd4XuUaX&#xd;
9aICz99AnHbDpUN8+LfL7Zdy4XvBPLRQpR/gWpfWEc2y9OJQHuz0SxPsOFVKpkSwexj1NWtcztm6&#xd;
/f7FigISR/bHOhxN7M4jjsCapjNsW6r7pM8P6i5du5W+Yj8l6ykXu7TKOp7jESNjPRybpt04Lbp8&#xd;
khSOupCch18kaT9oFQDCLrdyxdMysXDYcJvT2fVfyoCNimUzYJrMd7sY0sr6LYz8voI90t76F1h2&#xd;
4xuWz+IFgBrH8tZtTG83L1t6Kr8AO9DBbA/W/ByNOcwSTQJL8x1MN5b9JiDamvywboTbSsV4Qq8z&#xd;
MdL2neztf5NVcbKydpabhN49HVcOB9GpzKAFcXd7yKLGHHOPL1Q+OGcTl5LOS1RAjwSTk6Ag91zM&#xd;
F0zfsmdX6dpwiHQehRc+0lQTWYbPI4J6j4YxQwl4+Zb0nSzSqcVU58G8tvF/ooCh2z9Nh5iPLfFU&#xd;
K9xFyQ+ueHovr4HKlTqApveGJ6+17pVG/+6tpGtToAYD71eZqpRoP5ZlcndZjGz62YmvtdMcVoFa&#xd;
XVRlcMlhtBFjUy/Napfkwa8950QmfjDoQ8Ox4mqtjTv809juQhI+v8myhFxcFM6+1GM7PGuOgG8b&#xd;
MWNFirve352D8J1OOiR+dqVN+11NE+kbP1GsaW0swNLwS2GWQ7BqbbYSdsPtzxYfAIY+pW3KUyMM&#xd;
nzO32GMXZZPNyUa5AAAAAwAFWC41MDkAAAUgMIIFHDCCBASgAwIBAgIIUbdr3gSmeh8wDQYJKoZI&#xd;
hvcNAQELBQAwgasxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQHDAlT&#xd;
YW4gRGllZ28xEzARBgNVBAoMCkVNUiBEaXJlY3QxNjA0BgNVBAsMLUNlcnRpZmljYXRpb24gQXV0&#xd;
aG9yaXR5IChjZXJ0cy5lbXJkaXJlY3QuY29tKTEmMCQGA1UEAwwdRU1SIERpcmVjdCBUZXN0IERl&#xd;
dmljZSBTdWJDQTIwHhcNMjMxMTAyMjEyNTQyWhcNMjQxMTAyMjEyNTQyWjB6MQswCQYDVQQGEwJV&#xd;
UzETMBEGA1UECAwKQ2FsaWZvcm5pYTEXMBUGA1UECgwOTWV0cmlwb3J0IEluYy4xGTAXBgNVBAsM&#xd;
EENBUkVRVUFMSVRZLVRFU1QxIjAgBgNVBAMMGWloZS5zdGFnaW5nLm1ldHJpcG9ydC5jb20wggEi&#xd;
MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDi05ruWgI+Bed9eMonWT7Badv0R1nctXcnUJ87&#xd;
sqDiv/VQMSzKDTM1b8PsqmBkiL1vhhZzZgLsvMM2eTV3iwHvrut0yTRwi/jKx+lc5XIYVcXhHOhl&#xd;
wbEFTdmFuonJuO26cOua8Dw0fKYPgH9vPbywhVG0kNXQf+DgjuMM3IKXohR5AkpRMFr3RQN0mDEW&#xd;
cwPQ+a7GMDjSKeONnvTsa4D5K2CADSQYIh+FARWfWDuIvc7zOj1inTLdCRa0GCvE5Ocj/VQ+PpKr&#xd;
SoGUPULShuHfbs4k4xT2otGskuzowhTPLs95kvGCVBsIpfnNGG0QN7Ub8WpDD/nNzGJwGyBe16Ux&#xd;
AgMBAAGjggFyMIIBbjBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly9jZXJ0cy5l&#xd;
bXJkaXJlY3QuY29tL2NlcnRzL0VNUkRpcmVjdFRlc3REZXZpY2VTdWJDQTIuY3J0MB0GA1UdDgQW&#xd;
BBTHhH0qkOSuubx9pjHaChsgjBffJTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFLALWDvFk63G&#xd;
b2VdEcASrVrch4Y1ME0GA1UdHwRGMEQwQqBAoD6GPGh0dHA6Ly9jZXJ0cy5lbXJkaXJlY3QuY29t&#xd;
L2NybC9FTVJEaXJlY3RUZXN0RGV2aWNlU3ViQ0EyLmNybDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l&#xd;
BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMEQGA1UdEQQ9MDuCGWloZS5zdGFnaW5nLm1ldHJpcG9y&#xd;
dC5jb22GHkhUVFA6Ly9XV1cuQ0FSRVFVQUxJVFkuT1JHL1YwMTANBgkqhkiG9w0BAQsFAAOCAQEA&#xd;
CASUTJh9KQhdiksve1sR8cT/bB5Rn12qvlo36kNf0FvK6qxUY+bei3F1xeZ2X+2ALi88EypPwXH9&#xd;
N0CFsUNLG7twnjVtuIEPq/u6NU4dX55XdCIRQcTjj6ctSLGoN1aNo2jBD/FtPScuTR95c/Gza43R&#xd;
TqJaPKrVnaWd9QA6TVSBimIodpYDz02ciM2v889iK8HqYeGgk3m6SmAyliRQNcM1CM0dnjm3Jwa2&#xd;
dhHYtNNd0UUSd3mHAuqOTy9g9KBFp6pUVcVYaDY9m0g9hmEBJqAR4Ua3PYudVAn5ibiu45fxXvfg&#xd;
8ewh9vviw/FPfjqIwEiNA53B24GPnkC9J/n2SwAFWC41MDkAAAXcMIIF2DCCA8CgAwIBAgIIP1YZ&#xd;
EVyLzjMwDQYJKoZIhvcNAQELBQAwgZgxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UE&#xd;
BxMJU2FuIERpZWdvMRMwEQYDVQQKEwpFTVIgRGlyZWN0MTYwNAYDVQQLEy1DZXJ0aWZpY2F0aW9u&#xd;
IEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkxGzAZBgNVBAMTEkVNUiBEaXJlY3QgVGVz&#xd;
dCBDQTAeFw0yMzAzMDEyMTQ4NTJaFw0zMjA5MDYwNDMxMzZaMIGrMQswCQYDVQQGEwJVUzETMBEG&#xd;
A1UECAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJU2FuIERpZWdvMRMwEQYDVQQKDApFTVIgRGlyZWN0&#xd;
MTYwNAYDVQQLDC1DZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkx&#xd;
JjAkBgNVBAMMHUVNUiBEaXJlY3QgVGVzdCBEZXZpY2UgU3ViQ0EyMIIBIjANBgkqhkiG9w0BAQEF&#xd;
AAOCAQ8AMIIBCgKCAQEA1oFvfVS2hgZXcNYTZdKCET2WAgxBRLTEuv0JKvYgV1/bvsxdQP652/Ca&#xd;
dy+R8q2tTVf3eIUHtN3e28FLyJQUrTOPSiiVsiItOrziX3YQjTkyLqecmaz+5eRfHedmZ5Kery7x&#xd;
r4FuEMc0YT/bWoiV9dp87g4lBACb4tf+LPfRyZYXw+0DSc/0R17Up/zeWjEik29+cVFatSfcoois&#xd;
3DXY7XeuwmPpF+YkND1Udh6EUuvIvhB2x49TBurQMYWs+6S/URQnHV3AEuhSruA5xXHSqYDtOn71&#xd;
8SNzs5zvxBlDY9iNK28LsGL8MtVFuzqb3HLQGUhj8fMErYTqgLtV4hrPHwIDAQABo4IBDzCCAQsw&#xd;
UAYIKwYBBQUHAQEERDBCMEAGCCsGAQUFBzAChjRodHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9j&#xd;
ZXJ0cy9FTVJEaXJlY3RUZXN0Q0EuY3J0MB0GA1UdDgQWBBSwC1g7xZOtxm9lXRHAEq1a3IeGNTAP&#xd;
BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFDHWhC9JmG4AAdBnofieHLBvp6KsMBEGA1UdIAQK&#xd;
MAgwBgYEVR0gADBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9j&#xd;
cmwvRU1SRGlyZWN0VGVzdENBLmNybDAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIB&#xd;
AC6MbwbY6/sJxWTjmqIGVMh4eUESP/kQiVAOK8IhICehdUD/UMr3JO1QO40nh/4ZndXYSqsZNj8l&#xd;
Lw2BqlPUAklDB3jSpnzo/ejUZtFTwwwbjPT7uHl9SCGiek6+a5cbmMvit/Dj9zQpYI2WYMTJ8xVJ&#xd;
5YjQlQr68p9BVxn1coyAkpZFeJ7xs4t948PHnsJp8OFP2X84SLscjzkSfrP73BywuIvKm4VJ83tA&#xd;
NYhEqEZRf3gfcesSsoVYKITbV/gsXxtNKU3u7/1jk44GfHgs9U4yuZcMUVOukPIUH2tjzSo5ASVF&#xd;
iu/Pl58Uw3/lAnMk2+1wufqoguKjkq+FM/abbGsmXLwzEOEHxmUNmOnLlwuui2gzi1DHCM2JD4nX&#xd;
lFItwlWsq9sOTm9TsDzQxBZkPChsGgcEuyMGGlZJ9ro31gKkYGW/cHzMBJBIlm7GPnUKN4tCtPXy&#xd;
8GcFsPp0OD78HOHGHLO4lcIKDQvaf9s46LsEPLJbaAAF207KD5rejs3FVMZxHr+4NPtPneu2QZFs&#xd;
TN98tTxThcSa1lcf55AJCJyAgaDO/HqY2vSbl/7PTR2ttZJp7ZUYdXqlvrhmIm/3DErfgc9c/Ki/&#xd;
4xQ9DUmmhXeih+5tg5hqEn7TN4NVjWQVz1VSOKOxGex/X7xglBrw3o//szZVfS8+m7XdtQfOqABh&#xd;
AAVYLjUwOQAABmowggZmMIIETqADAgECAgEBMA0GCSqGSIb3DQEBCwUAMIGYMQswCQYDVQQGEwJV&#xd;
UzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCVNhbiBEaWVnbzETMBEGA1UEChMKRU1SIERpcmVjdDE2&#xd;
MDQGA1UECxMtQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKGNlcnRzLmVtcmRpcmVjdC5jb20pMRsw&#xd;
GQYDVQQDExJFTVIgRGlyZWN0IFRlc3QgQ0EwHhcNMTIwOTA2MDQzMTM2WhcNMzIwOTA2MDQzMTM2&#xd;
WjCBmDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlTYW4gRGllZ28xEzARBgNV&#xd;
BAoTCkVNUiBEaXJlY3QxNjA0BgNVBAsTLUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IChjZXJ0cy5l&#xd;
bXJkaXJlY3QuY29tKTEbMBkGA1UEAxMSRU1SIERpcmVjdCBUZXN0IENBMIICIjANBgkqhkiG9w0B&#xd;
AQEFAAOCAg8AMIICCgKCAgEAu6CTnoeii3rIQSiFtFB1A/qwxMLNc5KDEet5gjiHTQSExvzHxXMP&#xd;
9kIR2CavBrrLVYTtZo91Nxf+MJ3QY1TCCo/Puws/Y15MD2SCf+bSRe/EiDNoSEme12p2/MeqWG0g&#xd;
wBREC716sB8yfSCIrvPC1KDltjALT23K/h1EgBf1S686k6omdCT0NFF3rj70QqRf1mPWWpPT9aOv&#xd;
TDeNwZg3TZ0HTdPhYBFkS6DOQHM9yZg8uGXT2BGuBCDyayBNCLry9H5Qo1ShCFEkCST8ICqQxPxT&#xd;
O5p79bu61iTj++aIkQegLs5XvIZrtWsPQeGMPN+zneR2efOWjowH7qgYW0gpowXgPwZVKv4xj+lr&#xd;
4LZ2Sp/jLc+veGoze3i+Cav96DR2HOH37PiWkRnP1yJZw5fCObF5zc4Vqe8w54bg6EpGIYiP+ZWQ&#xd;
MRaULe1x0/bYO0aT9EcY4keR/qooXF40M4UdR1OmJeV0CXdxSD0E0CVSdYcXCKb5vLHFVjOZez/w&#xd;
p8t86nrEgWMj95100Tv9q9BagSQ5qmBQN9qLFaIjV3jRAYomvR3Vij5blXHPO58mnmIL/gSaVjNo&#xd;
r351U619AZ81ZpeZ9hrwfuStytZy+nRqd2jhF6Hdr6qnJu8FXJEmt57VY4NAeqzsnaXH2q7JV8jc&#xd;
GjHe5z8fDbHF2PFXdxSy93kCAwEAAaOBuDCBtTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE&#xd;
AwIBBjAdBgNVHQ4EFgQUMdaEL0mYbgAB0Geh+J4csG+noqwwHwYDVR0jBBgwFoAUMdaEL0mYbgAB&#xd;
0Geh+J4csG+noqwwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NlcnRzLmVtcmRpcmVjdC5jb20v&#xd;
RU1SRGlyZWN0VGVzdENBLmNybDARBgNVHSAECjAIMAYGBFUdIAAwDQYJKoZIhvcNAQELBQADggIB&#xd;
AGxdtjwHsVwiyTJ4H8IYQjvsZoMwN8pYax4kliUljPYV4gmA+2p0+HOfSOFBRVzCv/+ALmPVoBGW&#xd;
6ywbeAyvw5qOlKk6qp9cSPO4hN6r4fGyn66uyIlc5kqG6tjk0kpnfS6UUPE5n3ttZVRg9N/LLWpS&#xd;
uyqc2VbwslwKc3Nna4NImffYW6BS1Z7QQSBEzXT/xDYglcu4iERAtvCXqrs9wOI+RP/JWH/0vq6X&#xd;
Zs79lensN5I945p9Y64KhM1srGAG6WNqObZU0Hn5fH+tK4+ehNGGxpeGR76dvdlsYcnZlG79Djn4&#xd;
4HXCztV52cxyLbk5Wj7JWkfy2XYoX27UlU21/mZjf/8cTBHw5889Fl5AKqq4RJWtCNkgtro63uVU&#xd;
iGg0jrORkCndNpZgGL3i6lWR4D26pUgLtwGmI7P7pddEN0kMy6HrGwDa2rYTkFjnUfml+yRcEEaA&#xd;
fENDnpHdGyRnur81opKKoEAie54btNVb51H76tPaf3CTMkcqkD5hLTMeh28igHvUo2rU//1yGgIx&#xd;
wGs2mHmffYLwOk6UX6GLeQ6TCPByF+TMLldL5mKjlVg7IJXUL4JgnuzDWmyTXJgBY+b2udSZ+uY7&#xd;
bsde/qVbRn0Sl5S777nYJJiNmzHcTgnUVHRO6XOwPwFC0VEvpo9+5KDzmiQ6zHBv+nQB0hPFE7S9&#xd;
AAAAAQAMbWlydGhjb25uZWN0AAABjB1dVdwAAAUBMIIE/TAOBgorBgEEASoCEQEBBQAEggTpCr6+&#xd;
7oDmx++sS3AtENILTtUEunQH1aTGenDpD9onE3rQ+GxUIvGdHWphtwarsTfo0E3NFMZc1tKS0NAn&#xd;
VhnOBjC5RTtcN7haTpUsrmCkdD0E0dadGSErP+7TdSxTgwQa09rfynFgAAZYeDwKWtOMl52nBMnd&#xd;
LECu59LZpUvn32jrxCBuFD+IbaoRsNu6PabCThvv/70/q/rv7Dxtt5J5O+YlTgUn/KqtTqZiwvIp&#xd;
UDCvD1hkr03K7HP4FhFmcYKrcHPjSuVtgDc/lKK2ZUOWDSQWDBWrt+M1CFwCg56y/OOV4NORZM1m&#xd;
/A4jcYxehwV0RyEdoRna1lSGtLtY0kgL7y6Gt3pPWn8EZOibszH9E5vk+gqJ5uCgWbVpi0NnBPf+&#xd;
RN2gusG7OD+bvXOA60waWDzEppZekn0PmAGQL5fSiPOs7JyuRI1ywSNu7Kra5KIzB7n9abZU6ECz&#xd;
ugavInEOQH6wVKJD2pVa9JnDVF7kfmNPRwzGccMJv73OLA0zaUtXwHz41QFawQqttC+lmbXMRvoI&#xd;
+TZFA27GykoHX1GnZmCgat0lTRLLKBRHjoVZvqqP7wEklADlVGUt8JPxqueJvftYjMqwmd9gRJAo&#xd;
PjLjpJAE8hyS0z9eWqVjSJr/28uBI3Hgk9LQtBsz0IQvx6S7yveDTvA1w/ZgDhjQKT1x881aFsyN&#xd;
NZKDtGYgVtnkQYaDoKFyg0zMYg4juNUjEq/FsY5tUjxlrdzmUXyb9b1cnmBRSmAj4XST1TfDq/Y9&#xd;
Ye+sYDYpRCXKXloFQ41XcirwcL6VsULH96Y0/rsfsdWsOLlTCcPYVlVM4DlVxrQ8xc1zXomrogi1&#xd;
mmgfVO1B3Ipsjy1ZBRRPxzEw6TPh54S9i22MghCXfsmdZ/97IuhsfTTn52mZo0CKsOUvt3SS0OwD&#xd;
Uy8+qFSPQ3mS13KP8cJSbvZre9YR3LnEmw30+C5oV/ZAIRECW2OUQUennhLD6Dmm/GSosNgxksuJ&#xd;
yKANLk0Zad4xLru9GXYcxGVrBRyNVkKd5D4ACZTd2Y9t5VkkdUgWOkHjwEKfIgtQzWTrjQb7IvSQ&#xd;
sFTtxPl4i6Cm1wt149JwHBeXjKbDLK0D4iQRJtCORNN+xpR9LmnbL0FOrzfjFyqKF+7pFBr23Vbo&#xd;
9rHmUnbA/dvEdv6mK5EB50RT3GTKt1kDtS5b/E8R86QcihsKlB1QZjrktCr7j9E8tJlss4RgK0We&#xd;
Ohf6tijMMfyDQ6qutNF9OAqda4p+WI1jvTquVZFAawdc8umNEOHfZsAlRnEx9++Qbsd2niHhOqIJ&#xd;
Yc00GOxF1KMWZGhLEqMw9o3KHyZR21KdUw+tpul7t44MBTFHKgqVC1GqIIS7r+uZ//0R253vpx+b&#xd;
jwt01/ZLrUaUwavIVlVvHEJ8Y/MpCu20Q7zGtUrM9/oUgpBoWkSLcJ28o6b1GNUPV/YBCDP4K5/Z&#xd;
a76rzFZ/ykocphOpTN4lqAWMedtxdyBK6Ml0unmiHb7KlOw+hgn7fw87Jw7ZKcRo9+nuvCQgP/MW&#xd;
YPx4xakUCZPVUYHr9EYKcLCbVcZU4usvZNeYqx8ysCiOJGygAZa41XnBZ4FvLt3ds1JKnwP3hDnV&#xd;
Dh3ilpQSqh5Ga1a185j1Rt952pg6+7y8yrGQtw8MKWzOXoXe3t7ev8F0wUfPayKoeyJu4Mh3JX8u&#xd;
AAAAAQAFWC41MDkAAAcSMIIHDjCCBfagAwIBAgIHAlVlsn7d5TANBgkqhkiG9w0BAQsFADAuMSww&#xd;
KgYDVQQDDCNNaXJ0aCBDb25uZWN0IENlcnRpZmljYXRlIEF1dGhvcml0eTAgFw0yMzExMjUwMTI1&#xd;
NDlaGA8yMDczMTEyNTAxMjU0OVowGDEWMBQGA1UEAwwNbWlydGgtY29ubmVjdDCCASIwDQYJKoZI&#xd;
hvcNAQEBBQADggEPADCCAQoCggEBAMI6ckvXucEhND5kzHnUyqlBKjXc7YUSUYbkQiyDOHgwoiVJ&#xd;
ba5qYJI6VdLKOsblCadSs2QBQe7C65m+xEMxxIP+6Qh3sB6KOhtormCyJoL/+Ra9TMlSOrp/0CU+&#xd;
lU5hKbJa6qcIieoiMSeWLLh/u3GdnxZEwBU/DQQOJVN2sYr93EOydp+DWrHhjY64dm3R/WxIwCqW&#xd;
4G4fwrfBKzDTrqav7zWuzVd8zSfZ3aNZwz8Zv4DepRrj18WMiU23agB+PDBY932veQOWWRR5VRYA&#xd;
g5/frJ3Vn5EVJN1GNiReWGr7mef4vFSC1ctEc1A7DWdpZW1mRKFlxMM2zZlg0j96vekCAwEAAaOC&#xd;
BEMwggQ/MIIDBAYDVR0jBIIC+zCCAveAggLzMIIC7zCCAdegAwIBAgIBATANBgkqhkiG9w0BAQsF&#xd;
ADAuMSwwKgYDVQQDDCNNaXJ0aCBDb25uZWN0IENlcnRpZmljYXRlIEF1dGhvcml0eTAgFw0yMzEx&#xd;
MjUwMTI1NDlaGA8yMDczMTEyNTAxMjU0OVowLjEsMCoGA1UEAwwjTWlydGggQ29ubmVjdCBDZXJ0&#xd;
aWZpY2F0ZSBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1emWrO7po&#xd;
R8ALwyaYGf09T+tvPPIxQgov0jCNgxXtatln6uuK4HG6MJq3P+MXBRO8RO7XLDEi0ZXMoWa4p2iL&#xd;
+1I4NfwrtVsViEFUmmlKGd4gfoXrXETe58kaMc1zyyP4WjtGlkvC1HqjNhorgVpoWbgYTAlT0/Ci&#xd;
sO8akO6D8Ad3cDdSg8lCXKG8KxTEQ3DeLPmuJ/PAXbDBJIsnQNq/UM4LzscFaS0Jjb0DHv78qXMo&#xd;
RF2HTDCKDFfTJPG7GSIrf1JZ00etzj/JFgL+LngACF7Mtr+Q62NoxnafuuTtzffJn/OJyclq51EX&#xd;
XCiRCImOdh5XPeStffJnFSU5dM1DAgMBAAGjFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQAwDQYJKoZI&#xd;
hvcNAQELBQADggEBAAN2VpLKfTppXzOjn/BQRbPgMqkRCM6kLYD9PWHW6Zv++5LIJTV7ctyrGpU+&#xd;
CAs7zxZIf0oM3JggtkUw4V9zH6UVM9sX5HGIcaFu+5WRNUJaA0Iq/nxdD8Paa46cWgz59vVfvP6a&#xd;
hOdapdtHfPRpzXN486f9xjpC5h8y27HoYuYrfIakSJUknrEHRg4/Q11to5ZM6EoejUa0Z9bB850h&#xd;
/Z2IBQBihTTE/sVIbaTSzm9p2ssL00MUiABh95dVzGNp9+Op0AxhD5TAs1mm7o+ZcWM7rJWDcY8u&#xd;
fApEbFiaqd5f3zDUui1kPuQOqBZvrqSzOIn5StiiATnyOx1POWgKtRswggEzBgNVHQ4EggEqBIIB&#xd;
JjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMI6ckvXucEhND5kzHnUyqlBKjXc7YUS&#xd;
UYbkQiyDOHgwoiVJba5qYJI6VdLKOsblCadSs2QBQe7C65m+xEMxxIP+6Qh3sB6KOhtormCyJoL/&#xd;
+Ra9TMlSOrp/0CU+lU5hKbJa6qcIieoiMSeWLLh/u3GdnxZEwBU/DQQOJVN2sYr93EOydp+DWrHh&#xd;
jY64dm3R/WxIwCqW4G4fwrfBKzDTrqav7zWuzVd8zSfZ3aNZwz8Zv4DepRrj18WMiU23agB+PDBY&#xd;
932veQOWWRR5VRYAg5/frJ3Vn5EVJN1GNiReWGr7mef4vFSC1ctEc1A7DWdpZW1mRKFlxMM2zZlg&#xd;
0j96vekCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAKs19m/Zq+xt6uqWcW4knFFWW3C0T+tfpLBL7&#xd;
Hx6DdtXiiZnzTyEcCQ1tvGyW2nWIr1k15fcr0ttn8itOritaWpsfuq+KnvyRbr//LQwNjkR+MHww&#xd;
i7mXcDyDMbnEQKL/0QfBh6AoCFbOCklIEvhRziYpWdRvi8qHmUHZnNUZwDuTWEAtgZPaWvpOe3o4&#xd;
NdgjX/YmjmRjRy3ivIHWy3C0LN6A/zzynTkdzQcm9H9084Lou5lWbJQhmi6SMpttk1FbUm/1xXbS&#xd;
a9HzqieFDr1imv53n6Yz7MhUyYW+4I9J0VSzDOSqCLAshNsnvvdy3HbTOtRN6mzuFPCa+YJDn0EH&#xd;
LEvPeIm3E59NHORdGjPIf2CgNoXg&#xd;
</property>
        <property name="KeyStorePassword">dd0d4b52-a179-4392-8ba6-ef5544410bab</property>
        <property name="TrustStore">/u3+7QAAAAIAAAAAOSDYSvQFOOIhLCXLqS6sCqNY8O0=&#xd;
</property>
        <property name="settings">&lt;com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;
  &lt;validationLoginWarning&gt;true&lt;/validationLoginWarning&gt;
  &lt;expirationTimeUntil&gt;60d&lt;/expirationTimeUntil&gt;
&lt;/com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;</property>
      </properties>
    </entry>
    <entry>
      <string>Data Pruner</string>
      <properties>
        <property name="archiveEnabled">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="archiverBlockSize">50</property>
        <property name="archiverOptions">&lt;com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;
  &lt;destinationContent&gt;false&lt;/destinationContent&gt;
  &lt;encrypt&gt;false&lt;/encrypt&gt;
  &lt;includeAttachments&gt;false&lt;/includeAttachments&gt;
  &lt;passwordEnabled&gt;false&lt;/passwordEnabled&gt;
&lt;/com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;</property>
        <property name="enabled">false</property>
        <property name="includeAttachments">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="maxEventAge"></property>
        <property name="pollingProperties">&lt;com.mirth.connect.donkey.model.channel.PollConnectorProperties version=&quot;4.4.0&quot;&gt;
  &lt;pollingType&gt;INTERVAL&lt;/pollingType&gt;
  &lt;pollOnStart&gt;false&lt;/pollOnStart&gt;
  &lt;pollingFrequency&gt;3600000&lt;/pollingFrequency&gt;
  &lt;pollingHour&gt;0&lt;/pollingHour&gt;
  &lt;pollingMinute&gt;0&lt;/pollingMinute&gt;
  &lt;cronJobs/&gt;
  &lt;pollConnectorPropertiesAdvanced&gt;
    &lt;weekly&gt;true&lt;/weekly&gt;
    &lt;inactiveDays&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
    &lt;/inactiveDays&gt;
    &lt;dayOfMonth&gt;1&lt;/dayOfMonth&gt;
    &lt;allDay&gt;true&lt;/allDay&gt;
    &lt;startingHour&gt;8&lt;/startingHour&gt;
    &lt;startingMinute&gt;0&lt;/startingMinute&gt;
    &lt;endingHour&gt;17&lt;/endingHour&gt;
    &lt;endingMinute&gt;0&lt;/endingMinute&gt;
  &lt;/pollConnectorPropertiesAdvanced&gt;
&lt;/com.mirth.connect.donkey.model.channel.PollConnectorProperties&gt;</property>
        <property name="pruneEvents">false</property>
        <property name="pruningBlockSize">1000</property>
      </properties>
    </entry>
  </pluginProperties>
  <resourceProperties>
    <list>
      <com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties version="4.4.2">
  <pluginPointName>Directory Resource</pluginPointName>
        <type>Directory</type>
        <id>Default Resource</id>
        <name>[Default Resource]</name>
        <description>Loads libraries from the custom-lib folder in the Mirth Connect home directory.</description>
        <includeWithGlobalScripts>true</includeWithGlobalScripts>
        <loadParentFirst>false</loadParentFirst>
        <directory>custom-lib</directory>
        <directoryRecursion>true</directoryRecursion>
      </com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties>
    </list>
  </resourceProperties>
  <channelDependencies/>
  <configurationMap>
    <entry>
      <string>HL7v3.Sender.Name</string>
      <com.mirth.connect.util.ConfigurationProperty>
        <value>Metriport</value>
        <comment>The name of the HL7v3 message sending organization (OPTIONAL)</comment>
      </com.mirth.connect.util.ConfigurationProperty>
    </entry>
    <entry>
      <string>HL7v3.Sender.OID</string>
      <com.mirth.connect.util.ConfigurationProperty>
        <value>2.16.840.1.113883.3.9621</value>
        <comment>The OID of the HL7v3 message sending organization (REQUIRED)</comment>
      </com.mirth.connect.util.ConfigurationProperty>
    </entry>
  </configurationMap>
</serverConfiguration>